{"version":3,"sources":["types.ts","redux/mainMenuSlice.ts","config.ts","redux/finishSlice.ts","util/utilityFunctions.ts","cssStyles.tsx","util/client.js","redux/videoSlice.ts","i18n/config.tsx","main/MainMenu.tsx","globalKeys.ts","redux/metadataSlice.ts","redux/errorSlice.ts","main/Video.tsx","util/waveform.js","main/Timeline.tsx","main/CuttingActions.tsx","main/Metadata.tsx","main/FinishMenu.tsx","redux/workflowPostSlice.ts","main/Save.tsx","redux/endSlice.ts","main/Discard.tsx","redux/workflowPostAndProcessSlice.ts","main/WorkflowConfiguration.tsx","main/WorkflowSelection.tsx","main/Finish.tsx","main/MainContent.tsx","main/TheEnd.tsx","main/Error.tsx","main/Landing.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["MainMenuStateNames","configFileSettings","urlParameterSettings","settings","initialState","value","cutting","mainMenuSlice","createSlice","name","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","finishSlice","pageNumber","setPageNumber","selectFinishState","finishState","selectPageNumber","defaultSettings","mediaPackageId","undefined","opencast","url","window","location","origin","password","metadata","show","configureFields","thumbnail","init","a","loadContextSettings","then","result","validate","urlParams","URLSearchParams","search","rawUrlSettings","forEach","key","obj","segments","split","slice","segment","length","merge","all","basepath","process","endsWith","settingsPath","REACT_APP_SETTINGS_PATH","base","startsWith","fetch","response","console","warn","status","debug","ok","error","statusText","headers","get","parseToml","text","SyntaxError","allowParse","src","sourceDescription","schema","path","validateValue","validateObj","validation","newValue","e","out","newPath","SCHEMA","types","v","Error","catalogName","fieldName","attributeName","string","boolean","objectsWithinObjects","b","deepmerge","arrayMerge","array","flexGapIsSupported","destinationArray","sourceArray","options","roundToDecimalPlace","num","decimalPlace","decimalFactor","Math","pow","round","Number","EPSILON","convertMsToReadableString","ms","hours","Date","toISOString","substr","minutes","seconds","parseInt","push","join","checkFlexGapSupport","flex","document","createElement","style","display","flexDirection","rowGap","position","appendChild","body","scrollHeight","parentNode","removeChild","GlobalStyle","styles","globalStyle","css","emotionNormalize","backgroundColor","fontSize","minHeight","flexGapReplacementStyle","flexGapValue","flexDirectionIsRow","half","quarter","gap","marginTop","marginBottom","marginRight","marginLeft","basicButtonStyle","borderRadius","cursor","transitionDuration","transitionProperty","transform","justifyContent","alignItems","textAlign","nagivationButtonStyle","backOrContinueStyle","ariaLive","errorBoxStyle","errorStatus","borderColor","borderStyle","fontWeight","padding","client","endpoint","customConfig","authHeaders","encoded","btoa","unescape","encodeURIComponent","config","method","JSON","stringify","includes","data","parse","Promise","reject","message","post","isPlaying","isPlayPreview","currentlyAt","id","nanoid","start","end","deleted","tracks","activeSegmentIndex","selectedWorkflowIndex","previewTriggered","clickTriggered","aspectRatios","hasChanges","videoURLs","videoCount","duration","title","presenters","workflows","fetchVideoInformation","createAsyncThunk","updateCurrentlyAt","milliseconds","updateActiveSegment","skipDeletedSegments","videoSlice","setIsPlaying","setIsPlayPreview","setPreviewTriggered","setClickTriggered","setCurrentlyAt","setCurrentlyAtInSeconds","addSegment","setAspectRatio","dataKey","width","height","setHasChanges","cut","segmentA","segmentB","splice","markAsDeletedOrAlive","setSelectedWorkflowIndex","mergeLeft","mergeSegments","mergeRight","extraReducers","builder","addCase","pending","fulfilled","reduce","o","uri","parseSegments","sort","n1","n2","displayOrder","Array","rejected","findIndex","element","newSegments","mergeSegmentIndex","min","max","endTime","index","selectIsPlaying","videoState","selectIsPlayPreview","selectPreviewTriggered","selectClickTriggered","selectCurrentlyAt","selectCurrentlyAtInSeconds","selectSegments","selectActiveSegmentIndex","selectIsCurrentSegmentAlive","selectSelectedWorkflowIndex","selectVideoURL","selectVideoCount","selectDuration","selectDurationInSeconds","selectTitle","selectPresenters","selectTracks","selectWorkflows","selectAspectRatio","apply","map","minWidth","calculateTotalAspectRatio","resources","en","translation","i18n","use","initReactI18next","LanguageDetector","fallbackLng","MainMenuButton","iconName","stateName","t","useTranslation","dispatch","useDispatch","activeState","useSelector","onMenuItemClicked","finish","mainMenuButtonStyle","buttonString","toLowerCase","replace","role","tabIndex","onClick","onKeyDown","event","icon","size","MainMenu","mainMenuStyle","borderRight","flexShrink","aria-label","faFilm","faListUl","faPhotoVideo","faSignOutAlt","rewriteKeys","newKey","isMacOs","cuttingKeyMap","delete","preview","play","scrubberKeyMap","left","right","increase","decrease","catalogs","postStatus","postError","fetchMetadata","postMetadata","_","getState","allStates","metadataState","metadataSlice","setFieldValue","catalogIndex","fields","fieldIndex","setFieldReadonly","readOnly","selectCatalogs","selectGetStatus","selectGetError","selectPostStatus","selectPostError","selectTitleFromEpisodeDc","catalog","flavor","field","errorSlice","errorMessage","errorDetails","setError","selectIsError","errorState","selectErrorMessage","selectErrorDetails","VideoPlayer","isPrimary","aspectRatio","ref","useRef","useState","ready","setReady","onProgressCallback","playedSeconds","onReadyCallback","current","getInternalPlayer","w","videoWidth","h","videoHeight","onEndedCallback","useEffect","seekTo","onErrorCallback","playerConfig","file","attributes","playerWrapper","paddingTop","reactPlayerStyle","playing","muted","onProgress","progressInterval","onReady","onEnded","onError","disablePictureInPicture","VideoControls","videoControlsRowStyle","leftSideBoxStyle","rightSideBoxStyle","PreviewMode","React","switchPlayPreview","preventDefault","stopPropagation","blur","handlers","keyEvent","previewModeStyle","switchIconStyle","hotkeyName","aria-checked","aria-hidden","keyMap","allowChanges","faToggleOn","faToggleOff","PlayButton","switchIsPlaying","faPause","faPlay","aria-pressed","TimeDisplay","VideoHeader","presenter_header","metadataTitle","titleStyle","titleStyleBold","Video","videoURLStatus","videoPlayers","i","videoAreaStyle","borderBottom","videoPlayerAreaStyle","Waveform","opts","this","audioContext","AudioContext","oCanvas","buffer","WIDTH","HEIGHT","channelData","waveformImage","audioBuffer","aveRMS","peakRMS","numberSamples","waveformType","drawWaveform","drawCanvasWaveform","setDimensions","samples","type","delegateToWorker","worker","media","generateWaveform","getAudioData","_completeFuncs","fn","svgPath","catch","log","_error","toString","onerror","Object","defineProperty","set","opt","svgLength","_errorFuncs","prototype","constructor","ocCtx","getContext","decodeAudioData","arraybuffer","resolve","res","rej","ArrayBuffer","Blob","reader","FileReader","onload","readAsArrayBuffer","audiobuffer","dropSamples","getChannelData","amp","fillStyle","fillRect","lineWidth","strokeStyle","sliceWidth","x","beginPath","moveTo","sample","y","lineTo","stroke","sqrt","aveDBs","toDataURL","requestedLength","divider","filter","Worker","addEventListener","workerCommunication","bind","postMessage","setSVGpath","removeEventListener","terminate","len","createElementNS","setAttribute","oncomplete","Scrubber","timelineWidth","controlledPosition","setControlledPosition","isGrabbed","setIsGrabbed","wasPlayingWhenGrabbed","setWasPlayingWhenGrabbed","keyboardJumpDelta","setKeyboardJumpDelta","wasCurrentlyAtRef","nodeRef","updateXPos","scrubberStyle","zIndex","boxShadow","scrubberDragHandleStyle","background","borderTop","borderLeft","content","top","scrubberDragHandleIconStyle","onDrag","onStart","onStop","axis","bounds","aria-grabbed","currentTime","segmentStatus","moveLeft","moveRight","faBars","SegmentsList","segmentsStyle","active","borderWidth","boxSizing","Waveforms","images","setImages","waveformWorkerError","setWaveformWorkerError","waveformDisplayTestStyle","waveformsProcessed","videoURL","_index","blob","xhr","XMLHttpRequest","open","responseType","waveformWorker","File","image","numSamples","send","alt","faSpinner","spin","Timeline","useResizeObserver","timelineStyle","onMouseDown","rect","currentTarget","getBoundingClientRect","offsetX","clientX","setCurrentlyAtToClick","cuttingActionButtonStyle","CuttingActionsButton","actionName","actionHandler","tooltip","ariaLabelText","MarkAsDeletedButton","hotKeyName","isCurrentSegmentAlive","faTrash","faTrashRestore","CuttingActions","dispatchAction","cuttingStyle","blockStyle","faCut","faStepBackward","faStepForward","Metadata","getStatus","getError","keys","configureFieldsCatalog","readonly","metadataStyle","fieldStyle","fieldLabelStyle","fieldTypeStyle","isReadOnly","color","inputFieldTypeStyle","border","selectFieldTypeStyle","control","provided","menu","dateTimeTypeStyle","validateStyle","isError","lineHeight","helperHandleArrays","library","input","output","isArray","subArray","find","el","submitValue","getInitialValues","initValues","collection","generateReactSelectLibrary","searchValue","required","test","dateTimeValidator","date","dt","call","LuxonDateTime","fromJSDate","fromISO","isValid","getValidators","blurWithSubmit","onBlur","fieldId","catalogIndexString","substring","indexOf","parseValue","submitSingleField","returnValue","subValue","hasOwnProperty","__isNew__","toJSON","isNaN","getTime","onSubmit","values","formCatalogName","formFieldName","label","entries","descLabel","exists","replaceAll","generateComponent","isMulti","isClearable","format","disabled","dateFunsUtils","DateFnsUtils","showError","showErrorOnBlur","renderField","meta","htmlFor","other","generateComponentWithModifiedInput","touched","modified","valid","faCheck","renderCatalog","subscription","submitting","pristine","initialValues","render","handleSubmit","form","reset","FinishMenuButton","finishMenuButtonStyle","FinishMenu","finishMenuStyle","flexWrap","faSave","faFileExport","faTimesCircle","postVideoInformation","argument","convertSegments","workflowPostSlice","selected","selectStatus","workflowPostState","selectError","workflowPostAndProcessState","SaveButton","workflowStatus","metadataStatus","faExclamationCircle","save","videoSetHasChanges","metadataSetHasChanges","aria-live","aria-atomic","ariaSaveUpdate","Save","postWorkflowStatus","postMetadataStatus","postMetadataError","saveStyle","faChevronLeft","endSlice","setEnd","hasEnded","selectIsEnd","endState","selectEndState","DiscardButton","discard","Discard","cancelStyle","postVideoInformationWithWorkflow","workflow","workflowPostAndProcessSlice","SaveAndProcessButton","saveAndProcess","saveButtonStyle","WorkflowConfiguration","postAndProcessWorkflowStatus","postAndProcessError","workflowConfigurationStyle","faTools","WorkflowButton","workflowIndex","selectWorkflowIndex","workflowButtonStyle","WorkflowSelection","saveStatus","saveSelectStatus","saveError","saveSelectError","workflowSelectionStyle","workflowSelectionSelectionStyle","maxHeight","topTitle","topText","hasWorkflowButtons","bottomText","nextButton","Trans","i18nKey","description","PageButton","onPageChange","pageButtonStyle","Finish","pageZeroStyle","pageOneStyle","pageTwoStyle","MainContent","videoChanged","videoHasChanges","metadataChanged","metadataHasChanges","useBeforeunload","stateActive","displayState","paddingRight","paddingLeft","finishStyle","defaultStyle","StartOverButton","reloadPage","reload","TheEnd","theEndStyle","faCheckCircle","detailsStyle","faFrown","Landing","landingStyle","href","Body","isEnd","bodyStyle","Fragment","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","finishStateReducer","videoReducer","workflowPostReducer","workflowPostAndProcessReducer","endReducer","metadataReducer","errorReducer","initialize","race","setTimeout","ReactDOM","StrictMode","store","utils","getElementById"],"mappings":"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","file":"static/js/main.b26945c2.chunk.js","sourcesContent":["export interface Segment {\n  id: string,\n  start: number,\n  end: number,\n  deleted: boolean,\n}\n\nexport interface Track {\n  id: string,\n  uri: string,\n  flavor: any,\n  audioStream: any,\n  videoStream: any,\n}\n\nexport interface Workflow {\n  id: string,\n  name: string,\n  description: string,\n  displayOrder: number,\n}\n\nexport interface TimelineState {\n  segments: Segment[]\n  scrubberPos: number\n}\n\nexport interface PostEditArgument {\n  segments: Segment[]\n  tracks: Track[]\n}\n\nexport interface PostAndProcessEditArgument extends PostEditArgument{\n  workflow: [{id: string}]\n}\n\nexport enum MainMenuStateNames {\n  cutting = \"Cutting\",\n  metadata = \"Metadata\",\n  thumbnail = \"Thumbnail\",\n  finish = \"Finish\",\n}\n\nexport interface httpRequestState {\n  status: 'idle' | 'loading' | 'success' | 'failed',\n  error: string | undefined\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { MainMenuStateNames} from '../types'\n\nexport interface mainMenu {\n  value: MainMenuStateNames,\n}\n\nconst initialState: mainMenu = {\n  value: MainMenuStateNames.cutting,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<mainMenu[\"value\"]>) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: mainMenu[\"value\"]; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n","/**\n * Loads config values from\n * - a settings file\n * - GET parameters\n * and exports them.\n * Code was largely adapted from https://github.com/elan-ev/opencast-studio/blob/master/src/settings.js (January 11th, 2021)\n */\nimport parseToml from '@iarna/toml/parse-string';\nimport deepmerge from 'deepmerge';\n\n/**\n * Local constants\n */\nconst CONTEXT_SETTINGS_FILE = 'editor-settings.toml';\n\n// Sources that values can come from.\nconst SRC_SERVER = 'src-server';\nconst SRC_URL = 'src-url';\n\n/**\n * Possible configuration values for a metadata catalog field\n */\nexport interface configureFieldsAttributes {\n  show: boolean,\n  readonly: boolean,\n}\n\n/**\n * Settings interface\n */\ninterface iSettings {\n  mediaPackageId: string | undefined,\n  opencast: {\n    url: string,\n    name: string | undefined,\n    password: string | undefined,\n  },\n  metadata: {\n    show: boolean,\n    configureFields: { [key: string]: { [key: string]: configureFieldsAttributes } }  | undefined,\n  },\n  thumbnail: {\n    show: boolean,\n  }\n}\n\n/**\n * Settings objects\n * defaultSettings: Sets default values\n * configFileSettings: contains values from the config file\n * urlParameterSettings: contains values from GET parameters\n * settings: contains the combined values from all other setting objects\n */\nvar defaultSettings: iSettings = {\n  mediaPackageId: undefined,\n  opencast: {\n    url: window.location.origin,\n    name: undefined,\n    password: undefined,\n  },\n  metadata: {\n    show: true,\n    configureFields: undefined,\n  },\n  thumbnail: {\n    show: false,\n  }\n}\nvar configFileSettings: iSettings\nvar urlParameterSettings: iSettings\nexport var settings: iSettings\n\n/**\n * Entry point. Loads values from settings into the exported variables\n * Priorities are:\n * 1. GET Parameters\n * 2. Settings file\n * 3. Default values\n */\nexport const init = async () => {\n  // Get settings from config file\n  await loadContextSettings().then((result) => {\n    configFileSettings = validate(result, false, SRC_SERVER, \"from server settings file\")\n  })\n\n  // Get settings from URL query.\n  var urlParams = new URLSearchParams(window.location.search);\n\n  let rawUrlSettings = {};\n  urlParams.forEach(function(value, key) {\n    // Create empty objects for full path (if the key contains '.') and set\n    // the value at the end.\n    let obj : {[k: string]: any} = rawUrlSettings;\n    const segments = key.split('.');\n    segments.slice(0, -1).forEach((segment) => {\n      if (!(segment in obj)) {\n        obj[segment] = {};\n      }\n      obj = obj[segment];\n    });\n    obj[segments[segments.length - 1]] = value;\n  });\n\n  urlParameterSettings = validate(rawUrlSettings, true, SRC_URL, 'given as URL GET parameter');\n\n  // Combine results\n  settings = merge.all([defaultSettings, configFileSettings, urlParameterSettings]) as iSettings;\n};\n\n/**\n * Attempts to load toml settings file\n */\nconst loadContextSettings = async () => {\n\n  // Try to retrieve the context settings.\n  let basepath = process.env.PUBLIC_URL || '/';\n  if (!basepath.endsWith('/')) {\n    basepath += '/';\n  }\n\n  // Construct path to settings file. If the `REACT_APP_SETTINGS_PATH` is\n  // given and starts with '/', it is interpreted as absolute path from the\n  // server root.\n  const settingsPath = process.env.REACT_APP_SETTINGS_PATH || CONTEXT_SETTINGS_FILE;\n  const base = settingsPath.startsWith('/') ? '' : basepath;\n  const url = `${window.location.origin}${base}${settingsPath}`;\n  let response;\n  try {\n    response = await fetch(url);\n  } catch (e) {\n    console.warn(`Could not access '${settingsPath}' due to network error!`, e || \"\");\n    return null;\n  }\n\n  if (response.status === 404) {\n    // If the settings file was not found, we silently ignore the error. We\n    // expect many installation to provide this file.\n    console.debug(`'${settingsPath}' returned 404: ignoring`);\n    return null;\n  } else if (!response.ok) {\n    console.error(\n      `Fetching '${settingsPath}' failed: ${response.status} ${response.statusText}`\n    );\n    return null;\n  }\n\n  if (response.headers.get('Content-Type')?.startsWith('text/html')) {\n    console.warn(`'${settingsPath}' request has 'Content-Type: text/html' -> ignoring...`);\n    return null;\n  }\n\n  try {\n    return parseToml(await response.text());\n  } catch (e) {\n    console.error(`Could not parse '${settingsPath}' as TOML: `, e);\n    throw new SyntaxError(`Could not parse '${settingsPath}' as TOML: ${e}`);\n  }\n\n};\n\n/**\n * Validate the given `obj` with the global settings `SCHEMA`. If `allowParse`\n * is true, string values are attempted to parse into the expected type. `src`\n * must be one of `SRC_SERVER`, `SRC_URL` or `SRC_LOCAL_STORAGE`.\n * `srcDescription` is just a string for error messages specifying where `obj`\n * comes from.\n * */\nconst validate = (obj: Record<string, any> | null, allowParse: boolean, src: string, sourceDescription: string) => {\n  // Validates `obj` with `schema`. `path` is the current path used for error\n  // messages.\n  const validate = (schema: any, obj: Record<string, any> | null, path: string) => {\n    if (typeof schema === 'function') {\n      return validateValue(schema, obj, path);\n    } else {\n      return validateObj(schema, obj, path);\n    }\n  };\n\n  // Validate a settings value with a validation function. Returns the final\n  // value of the setting or `null` if it should be ignored.\n  const validateValue = (validation: (arg0: any, arg1: boolean, arg2: string) => any, value: Record<string, any> | null, path: string) => {\n    try {\n      const newValue = validation(value, allowParse, src);\n      return newValue === undefined ? value : newValue;\n    } catch (e) {\n      console.warn(\n        `Validation of setting '${path}' (${sourceDescription}) with value '${value}' failed: `\n          + `${e}. Ignoring.`\n      );\n      return null;\n    }\n  };\n\n  // Validate a settings object/namespace. `schema` and `obj` need to be\n  // objects.\n  const validateObj = (schema: any, obj: Record<string, any> | null, path: string) => {\n    // We iterate through all keys of the given settings object, checking if\n    // each key is valid and recursively validating the value of that key.\n    let out : {[k: string]: any} = {};\n    for (const key in obj) {\n      const newPath = path ? `${path}.${key}` : key;\n      if (key in schema) {\n        const value = validate(schema[key], obj[key], newPath);\n\n        // If `null` is returned, the validation failed and we ignore this\n        // value.\n        if (value !== null) {\n          out[key] = value;\n        }\n      } else {\n        console.warn(\n          `'${newPath}' (${sourceDescription}) is not a valid settings key. Ignoring.`\n        );\n      }\n    }\n\n    return out;\n  };\n\n  return validate(SCHEMA, obj, \"\");\n}\n\n\n// Validation functions for different types.\nconst types = {\n  'string': (v: any, allowParse: any) => {\n    if (typeof v !== 'string') {\n      throw new Error(\"is not a string, but should be\");\n    }\n  },\n  'boolean': (v: string, allowParse: any) => {\n    if (typeof v === 'boolean') {\n      return;\n    }\n\n    if (allowParse) {\n      if (v === 'true') {\n        return true;\n      }\n      if (v === 'false') {\n        return false;\n      }\n      throw new Error(\"can't be parsed as boolean\");\n    } else {\n      throw new Error(\"is not a boolean\");\n    }\n  },\n  'objectsWithinObjects': (v: any, allowParse: any) => {\n    for (let catalogName in v) {\n      if (typeof catalogName !== 'string') {\n        throw new Error(\"is not a string, but should be\");\n      }\n      for (let fieldName in v[catalogName]) {\n        if (typeof fieldName !== 'string') {\n          throw new Error(\"is not a string, but should be\");\n        }\n        for (let attributeName in v[catalogName][fieldName]) {\n          if (typeof attributeName !== 'string') {\n            throw new Error(\"is not a string, but should be\");\n          }\n          if (attributeName === 'show' && typeof v[catalogName][fieldName][attributeName] !== 'boolean') {\n            throw new Error(\"is not a boolean\");\n          }\n          if (attributeName === 'readonly' && typeof v[catalogName][fieldName][attributeName] !== 'boolean') {\n            throw new Error(\"is not a boolean\");\n          }\n        }\n      }\n    }\n  }\n};\n\n// Defines all potential settings and their types.\n//\n// Each setting value has to be a validation function. Such a function takes two\n// arguments: the input value `v` and the boolean `allowParse` which specifies\n// whether the input might be parsed into the correct type (this is only `true`\n// for GET parameters). The validation should throw an error if the input value\n// is not valid for the setting. If the function returns `undefined`, the input\n// value is valid and used. If the validator returns a different value, the\n// input is valid, but is replaced by that new value. See the `types` object\n// above for some examples.\nconst SCHEMA = {\n  mediaPackageId: types.string,\n  opencast: {\n    url: types.string,\n    name: types.string,\n    password: types.string,\n  },\n  metadata: {\n    show : types.boolean,\n    configureFields: types.objectsWithinObjects,\n  },\n  thumbnail: {\n    show : types.boolean,\n  }\n}\n\nconst merge = (a: iSettings, b: iSettings) => {\n  return deepmerge(a, b, { arrayMerge });\n};\nmerge.all = (array: object[]) => deepmerge.all(array, { arrayMerge })\nconst arrayMerge = (destinationArray: any, sourceArray: any, options: any) => sourceArray;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface finish {\n  value: \"Save changes\" | \"Start processing\" | \"Discard changes\" | undefined,\n  pageNumber: number,\n}\n\nconst initialState: finish = {\n  value: \"Start processing\",\n  pageNumber: 0,\n}\n\n/**\n * Slice for the main menu state\n */\nexport const finishSlice = createSlice({\n  name: 'finishState',\n  initialState,\n  reducers: {\n    setState: (state, action: PayloadAction<finish[\"value\"]>) => {\n      state.value = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.pageNumber = action.payload;\n    }\n  }\n})\n\n// Export Actions\nexport const { setState, setPageNumber } = finishSlice.actions\n\n// Export Selectors\nexport const selectFinishState = (state: { finishState: { value: finish[\"value\"]; }; }) => state.finishState.value\nexport const selectPageNumber = (state: { finishState: { pageNumber: finish[\"pageNumber\"]; }; }) => state.finishState.pageNumber\n\nexport default finishSlice.reducer\n","export const roundToDecimalPlace = (num: number, decimalPlace: number) => {\n  let decimalFactor = Math.pow(10, decimalPlace)\n  return Math.round((num + Number.EPSILON) * decimalFactor) / decimalFactor\n}\n\n\n// Returns a promise that resolves after `ms` milliseconds.\nexport const sleep = (ms: number) => new Promise((resolve, reject) => setTimeout(resolve, ms));\n\n\n// Get an understandable time string for ARIA\nexport const convertMsToReadableString = (ms: number): string => {\n  let hours = new Date((ms ? ms : 0)).toISOString().substr(11, 2)\n  let minutes = new Date((ms ? ms : 0)).toISOString().substr(14, 2)\n  let seconds = new Date((ms ? ms : 0)).toISOString().substr(17, 2)\n\n  let result = []\n  if (parseInt(hours) > 0) { result.push(hours + \" hours, \")}\n  if (parseInt(minutes) > 0 || parseInt(hours) > 0) { result.push(minutes + \" minutes, \")}\n  result.push(seconds + \" seconds\")\n\n  return result.join(\"\")\n}\n\n/**\n * Parses JSON. Returns [err, result]\n * @param str string that should be parsed\n */\nexport function safeJsonParse(str : string) {\n  try {\n      return [null, JSON.parse(str)];\n  } catch (err) {\n      return [err];\n  }\n}\n\n/**\n * Checks whether the css property gap for flexbox is supported by the browser.\n * Currently, this cannot be checked with \"@support\", so we use this workaround\n * instead.\n */\nvar flexGapIsSupported: boolean | undefined;\nexport function checkFlexGapSupport() {\n  // Use the cached value if it has been defined\n\tif (flexGapIsSupported !== undefined) {\n\t\treturn flexGapIsSupported\n\t}\n\n\t// Create a flex container with row-gap set\n\tconst flex = document.createElement('div')\n\tflex.style.display = 'flex'\n\tflex.style.flexDirection = 'column'\n\tflex.style.rowGap = '1px'\n\tflex.style.position = 'absolute'\n\n\t// Create two, elements inside it\n\tflex.appendChild(document.createElement('div'))\n\tflex.appendChild(document.createElement('div'))\n\n\t// Append to the DOM (needed to obtain scrollHeight)\n\tdocument.body.appendChild(flex)\n\n  // Flex container should be 1px high due to the row-gap\n  flexGapIsSupported = flex.scrollHeight === 1\n\n  // Remove element from the DOM after you are done with it\n  if(flex.parentNode) {\n    flex.parentNode.removeChild(flex)\n  }\n\n\treturn flexGapIsSupported\n}","/**\n * This file contains general css stylings\n */\nimport { css, Global } from '@emotion/react'\nimport React from \"react\";\nimport emotionNormalize from 'emotion-normalize';\nimport { checkFlexGapSupport } from './util/utilityFunctions';\n\n/**\n * An emotion component that inserts styles globally\n * Is removed when the styles change or when the Global component unmounts.\n */\nexport const GlobalStyle: React.FC = () => {\n  return (\n    <Global styles={globalStyle} />\n  );\n}\n\n/**\n * CSS for the global style component\n */\nexport const globalStyle = css({\n  emotionNormalize,\n  body: {\n    backgroundColor: 'snow',\n    fontSize: 'medium',\n    // Makes the body span to the bottom of the page\n    minHeight: \"100vh\",\n  },\n});\n\n\n/**\n * CSS for replacing flexbox gap in browers that do not support it\n * Does not return a css prop, but is meant as a direct replacement for \"gap\"\n * Example: ...(flexGapReplacementStyle(30, false))\n */\nexport const flexGapReplacementStyle = (flexGapValue: number, flexDirectionIsRow: boolean) => {\n\n  let half = flexGapValue / 2\n  let quarter = flexGapValue / 4\n\n  return (\n    {\n    // Use gap if supported\n    ...(checkFlexGapSupport()) && {gap: `${flexGapValue}px`},\n    // Else use margins\n    ...(!checkFlexGapSupport()) &&\n      {\n        \">*\": { // For each child\n          marginTop: `${quarter}px`,\n          marginBottom: `${quarter}px`,\n          marginRight: `${half}px`,\n          marginLeft: `${half}px`,\n        },\n        ...(flexDirectionIsRow) && {\n          \">*:first-of-type\": {\n            marginLeft: '0px',\n          },\n          \">*:last-child\": {\n            marginRight: '0px',\n          },\n        },\n      }\n    }\n  );\n}\n\n/**\n * CSS for buttons\n */\nexport const basicButtonStyle = css({\n  borderRadius: '10px',\n  cursor: \"pointer\",\n  // Animation\n  transitionDuration: \"0.3s\",\n  transitionProperty: \"transform\",\n  \"&:hover\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:focus\": {\n    transform: 'scale(1.1)',\n  },\n  \"&:active\": {\n    transform: 'scale(0.9)',\n  },\n  // Flex position child elements\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  ...(flexGapReplacementStyle(10, false)),\n  textAlign: 'center' as const,\n});\n\n/**\n * CSS for nagivation styled buttons\n */\nexport const nagivationButtonStyle = css({\n  width: '200px',\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  justifyContent: 'space-around'\n })\n\n/**\n * CSS for a container that holds back/forward buttons\n */\nexport const backOrContinueStyle = css(({\n  display: 'flex',\n  flexDirection: 'row' as const,\n  ...(flexGapReplacementStyle(20, false)),\n}))\n\n/**\n * CSS for ariaLive regions that should not be visible\n */\nexport const ariaLive = css({\n  position: 'absolute',\n  left: '-99999px',\n  height: '1px',\n  width: '1px',\n  overflow: 'hidden',\n})\n\n/**\n * CSS for displaying of errors\n */\nexport const errorBoxStyle = (errorStatus: boolean) => {\n  return (\n    css({\n      ...(!errorStatus) && {display: \"none\"},\n      borderColor: 'red',\n      borderStyle: 'dashed',\n      fontWeight: 'bold',\n      padding: '10px',\n    })\n  );\n}\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nimport { settings } from '../config';\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  // Attempt Http basic auth if we got credentials\n  let authHeaders = {}\n  if (settings.opencast.name && settings.opencast.password) {\n    const encoded = btoa(unescape(encodeURIComponent(\n      settings.opencast.name + \":\" + settings.opencast.password\n    )));\n    authHeaders = { 'Authorization': `Basic ${encoded}` };\n  }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  let text\n  let response\n  try {\n    response = await window.fetch(endpoint, config)\n    text = await response.text()\n\n    if (response.url.includes(\"login.html\")) {\n      throw new Error(\"Got redirected to login page, authentification failed.\")\n    }\n\n    if (response.ok) {\n      text.length ? data = JSON.parse(text) : data = ''\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(response.status ?\n        \"Status \" + response.status + \": \" + text :\n        err.message\n      )\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","import { createSlice, nanoid, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { Segment, httpRequestState, Track, Workflow }  from '../types'\nimport { roundToDecimalPlace } from '../util/utilityFunctions'\nimport { WritableDraft } from 'immer/dist/internal';\nimport { settings } from '../config';\n\nexport interface video {\n  isPlaying: boolean,             // Are videos currently playing?\n  isPlayPreview: boolean,         // Should deleted segments be skipped?\n  previewTriggered: boolean,      // Basically acts as a callback for the video players.\n  clickTriggered: boolean,        // Another video player callback\n  currentlyAt: number,            // Position in the video in milliseconds\n  segments: Segment[],\n  tracks: Track[],\n  activeSegmentIndex: number,     // Index of the segment that is currenlty hovered\n  selectedWorkflowIndex: number,  // Index of the currently selected workflow\n  aspectRatios: {width: number, height: number}[],  // Aspect ratios of every video\n  hasChanges: boolean             // Did user make changes in cutting view since last save\n\n  videoURLs: string[],  // Links to each video\n  videoCount: number,   // Total number of videos\n  duration: number,     // Video duration in milliseconds\n  title: string,\n  presenters: string[],\n  workflows: Workflow[],\n}\n\nexport const initialState: video & httpRequestState = {\n  isPlaying: false,\n  isPlayPreview: true,\n  currentlyAt: 0,   // Position in the video in milliseconds\n  segments: [{id: nanoid(), start: 0, end: 1, deleted: false}],\n  tracks: [],\n  activeSegmentIndex: 0,\n  selectedWorkflowIndex: 0,\n  previewTriggered: false,\n  clickTriggered: false,\n  aspectRatios: [],\n  hasChanges: false,\n\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  title: '',\n  presenters: [],\n  workflows: [],\n\n  status: 'idle',\n  error: undefined,\n}\n\nexport const fetchVideoInformation = createAsyncThunk('video/fetchVideoInformation', async () => {\n  if (!settings.mediaPackageId) {\n    throw new Error(\"Missing mediaPackageId\")\n  }\n\n  // const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  const response = await client.get(`${settings.opencast.url}/editor/${settings.mediaPackageId}/edit.json`)\n  return response\n})\n\nconst updateCurrentlyAt = (state: video, milliseconds: number) => {\n  state.currentlyAt = roundToDecimalPlace(milliseconds, 0);\n\n  if (state.currentlyAt < 0) {\n    state.currentlyAt = 0;\n  }\n\n  if (state.duration !== 0 && state.duration < state.currentlyAt) {\n    state.currentlyAt = state.duration\n  }\n\n  updateActiveSegment(state);\n  skipDeletedSegments(state);\n};\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState,\n  reducers: {\n    setIsPlaying: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlaying = action.payload;\n    },\n    setIsPlayPreview: (state, action: PayloadAction<video[\"isPlaying\"]>) => {\n      state.isPlayPreview = action.payload;\n    },\n    setPreviewTriggered: (state, action) => {\n      state.previewTriggered = action.payload\n    },\n    setClickTriggered: (state, action) => {\n      state.clickTriggered = action.payload\n    },\n    setCurrentlyAt: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      updateCurrentlyAt(state, action.payload);\n    },\n    setCurrentlyAtInSeconds: (state, action: PayloadAction<video[\"currentlyAt\"]>) => {\n      updateCurrentlyAt(state, roundToDecimalPlace(action.payload * 1000, 0))\n    },\n    addSegment: (state, action: PayloadAction<video[\"segments\"][0]>) => {\n      state.segments.push(action.payload)\n    },\n    setAspectRatio: (state, action: PayloadAction<{dataKey: number} & {width: number, height: number}> ) => {\n      state.aspectRatios[action.payload.dataKey] = {width: action.payload.width, height: action.payload.height}\n    },\n    setHasChanges: (state, action: PayloadAction<video[\"hasChanges\"]>) => {\n      state.hasChanges = action.payload\n    },\n    cut: (state) => {\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[state.activeSegmentIndex].start === state.currentlyAt ||\n          state.segments[state.activeSegmentIndex].end === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        start: state.segments[state.activeSegmentIndex].start,\n        end: state.currentlyAt,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n      let segmentB : Segment =  {id: nanoid(),\n        start: state.currentlyAt,\n        end: state.segments[state.activeSegmentIndex].end,\n        deleted: state.segments[state.activeSegmentIndex].deleted}\n\n      // Add the new segments and remove the old one\n      state.segments.splice(state.activeSegmentIndex, 1, segmentA, segmentB);\n\n      state.hasChanges = true\n    },\n    markAsDeletedOrAlive: (state) => {\n      state.segments[state.activeSegmentIndex].deleted = !state.segments[state.activeSegmentIndex].deleted\n      state.hasChanges = true\n    },\n    setSelectedWorkflowIndex: (state, action: PayloadAction<video[\"selectedWorkflowIndex\"]>) => {\n      state.selectedWorkflowIndex = action.payload\n    },\n    mergeLeft: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex - 1)\n      state.hasChanges = true\n    },\n    mergeRight: (state) => {\n      mergeSegments(state, state.activeSegmentIndex, state.activeSegmentIndex + 1)\n      state.hasChanges = true\n    },\n  },\n  // For Async Requests\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n\n        // // Old API\n        // // eslint-disable-next-line no-sequences\n        // state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        // state.videoCount = action.payload.previews.length\n        // state.duration = action.payload.duration\n        // state.title = action.payload.title\n        // state.presenters = action.payload.presenters\n        // state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        // state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n        //   if (n1.displayOrder > n2.displayOrder) { return 1; }\n        //   if (n1.displayOrder < n2.displayOrder) { return -1; }\n        //   return 0;\n        // });\n\n        // New API\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.tracks.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = state.videoURLs.length\n        state.duration = action.payload.duration\n        state.title = action.payload.title\n        state.presenters = []\n        state.segments = parseSegments(action.payload.segments, action.payload.duration)\n        state.tracks = action.payload.tracks\n        state.workflows = action.payload.workflows.sort((n1: { displayOrder: number; },n2: { displayOrder: number; }) => {\n          if (n1.displayOrder > n2.displayOrder) { return 1; }\n          if (n1.displayOrder < n2.displayOrder) { return -1; }\n          return 0;\n        });\n\n        state.aspectRatios = new Array(state.videoCount)\n    })\n    builder.addCase(\n      fetchVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\n/**\n * Helper function to update the activeSegmentIndex\n * @param state\n */\nconst updateActiveSegment = (state: WritableDraft<video>) => {\n  state.activeSegmentIndex = state.segments.findIndex(element =>\n    element.start <= state.currentlyAt && element.end >= state.currentlyAt)\n  // If there is an error, assume the first (the starting) segment\n  if(state.activeSegmentIndex < 0) {\n    state.activeSegmentIndex = 0\n  }\n}\n\n/**\n * Helper Function for testing with current/old editor API\n */\nexport const parseSegments = (segments: Segment[], duration: number) => {\n  let newSegments : Segment[] = []\n\n  if (segments.length === 0) {\n    newSegments.push({id: nanoid(), start: 0, end: duration, deleted: false})\n  }\n\n  segments.forEach((segment: Segment) => {\n    newSegments.push({id: nanoid(), start: segment.start, end: segment.end, deleted: segment.deleted})\n  });\n  return newSegments\n}\n\n/**\n * Helper function for merging two segments\n */\nconst mergeSegments = (state: WritableDraft<video>, activeSegmentIndex: number, mergeSegmentIndex: number) => {\n  // Check if mergeSegmentIndex is valid\n  if (mergeSegmentIndex < 0 || mergeSegmentIndex > state.segments.length - 1) {\n    return\n  }\n\n  // Increase activeSegment length\n  state.segments[activeSegmentIndex].start = Math.min(\n    state.segments[activeSegmentIndex].start, state.segments[mergeSegmentIndex].start)\n  state.segments[activeSegmentIndex].end = Math.max(\n    state.segments[activeSegmentIndex].end, state.segments[mergeSegmentIndex].end)\n\n  // Remove the other segment\n  state.segments.splice(mergeSegmentIndex, 1);\n\n  // Update active segment\n  updateActiveSegment(state)\n}\n\nconst skipDeletedSegments = (state: WritableDraft<video>) => {\n  if(state.isPlaying && state.segments[state.activeSegmentIndex].deleted && state.isPlayPreview) {\n      let endTime = state.segments[state.activeSegmentIndex].end\n\n      for (let index = state.activeSegmentIndex; index < state.segments.length; index++) {\n        endTime = state.segments[index].end\n\n        if (!state.segments[index].deleted) {\n          // Need to at +1 as start and end of neighbouring segments are identical\n          endTime = state.segments[index].start + 1\n          break\n        }\n      }\n\n      state.currentlyAt = endTime\n      state.previewTriggered = true\n      updateActiveSegment(state);\n    }\n}\n\n/**\n * Calculates a total aspect ratio for the video player wrappers,\n * based on the aspect ratio of all videos.\n * Returns the total aspect ratio in percent,\n * or returns a default aspect ratio to limit the height of the video player area\n * TODO: Error checking\n * TODO: Improve calculation to handle multiple rows of videos\n */\nconst calculateTotalAspectRatio = (aspectRatios: video[\"aspectRatios\"]) => {\n  let minHeight = Math.min.apply(Math, aspectRatios.map(function(o) { return o.height; }))\n  let minWidth = Math.min.apply(Math, aspectRatios.map(function(o) { return o.width; }))\n  minWidth *= aspectRatios.length\n  return Math.min((minHeight / minWidth) * 100, (9/32) * 100)\n}\n\nexport const { setIsPlaying, setIsPlayPreview, setCurrentlyAt, setCurrentlyAtInSeconds, addSegment, setAspectRatio,\n  setHasChanges, cut, markAsDeletedOrAlive, setSelectedWorkflowIndex, mergeLeft, mergeRight, setPreviewTriggered,\n  setClickTriggered } = videoSlice.actions\n\n// Export selectors\n// Selectors mainly pertaining to the video state\nexport const selectIsPlaying = (state: { videoState: { isPlaying: video[\"isPlaying\"] }; }) =>\n  state.videoState.isPlaying\nexport const selectIsPlayPreview = (state: { videoState: { isPlayPreview: video[\"isPlayPreview\"] }; }) =>\n  state.videoState.isPlayPreview\nexport const selectPreviewTriggered = (state: { videoState: { previewTriggered: video[\"previewTriggered\"] } }) =>\n  state.videoState.previewTriggered\nexport const selectClickTriggered = (state: { videoState: { clickTriggered: video[\"clickTriggered\"] } }) =>\n  state.videoState.clickTriggered\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt\nexport const selectCurrentlyAtInSeconds = (state: { videoState: { currentlyAt: video[\"currentlyAt\"]; }; }) =>\n  state.videoState.currentlyAt / 1000\nexport const selectSegments = (state: { videoState: { segments: video[\"segments\"] } }) =>\n  state.videoState.segments\nexport const selectActiveSegmentIndex = (state: { videoState: { activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  state.videoState.activeSegmentIndex\nexport const selectIsCurrentSegmentAlive = (state: { videoState:\n  { segments: { [x: number]: { deleted: boolean; }; }; activeSegmentIndex: video[\"activeSegmentIndex\"]; }; }) =>\n  !state.videoState.segments[state.videoState.activeSegmentIndex].deleted\nexport const selectSelectedWorkflowIndex = (state: { videoState:\n  { selectedWorkflowIndex: video[\"selectedWorkflowIndex\"]; }; }) =>\n  state.videoState.selectedWorkflowIndex\nexport const hasChanges = (state: { videoState: { hasChanges: video[\"hasChanges\"]; }; }) =>\n  state.videoState.hasChanges\n\n// Selectors mainly pertaining to the information fetched from Opencast\nexport const selectVideoURL = (state: { videoState: { videoURLs: video[\"videoURLs\"] } }) => state.videoState.videoURLs\nexport const selectVideoCount = (state: { videoState: { videoCount: video[\"videoCount\"] } }) => state.videoState.videoCount\nexport const selectDuration = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration\nexport const selectDurationInSeconds = (state: { videoState: { duration: video[\"duration\"] } }) => state.videoState.duration / 1000\nexport const selectTitle = (state: { videoState: { title: video[\"title\"] } }) => state.videoState.title\nexport const selectPresenters = (state: { videoState: { presenters: video[\"presenters\"] } }) => state.videoState.presenters\nexport const selectTracks = (state: { videoState: { tracks: video[\"tracks\"] } }) =>\n  state.videoState.tracks\nexport const selectWorkflows = (state: { videoState: { workflows: video[\"workflows\"] } }) => state.videoState.workflows\nexport const selectAspectRatio = (state: { videoState: { aspectRatios: video[\"aspectRatios\"] } }) =>\n  calculateTotalAspectRatio(state.videoState.aspectRatios)\n\nexport default videoSlice.reducer\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport enTranslations from './locales/en.json';\n\nconst resources = {\n  en: { translation: enTranslations }\n};\n\ni18n\n    .use(initReactI18next)\n    .use(LanguageDetector)\n    .init({\n        resources,\n        fallbackLng: 'en',\n  });\n  ","import React from \"react\";\n\nimport { css } from '@emotion/react'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm, faListUl, faPhotoVideo, faSignOutAlt, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setState, selectMainMenuState, mainMenu } from '../redux/mainMenuSlice'\nimport { setPageNumber } from '../redux/finishSlice'\n\nimport { MainMenuStateNames } from '../types'\nimport { settings } from '../config'\nimport { basicButtonStyle, flexGapReplacementStyle } from '../cssStyles'\nimport { setIsPlaying } from \"../redux/videoSlice\";\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  const mainMenuStyle = css({\n    borderRight: '1px solid #BBB',\n    width: '100px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    flexShrink: 0,\n    alignItems: 'center',\n    padding: '20px',\n    ...(flexGapReplacementStyle(30, false)),\n  });\n\n  return (\n    <nav css={mainMenuStyle} role=\"navigation\" aria-label={t(\"mainMenu.tooltip-aria\")}>\n      <MainMenuButton iconName={faFilm} stateName={MainMenuStateNames.cutting}/>\n      {settings.metadata.show && <MainMenuButton iconName={faListUl} stateName={MainMenuStateNames.metadata}/>}\n      {settings.thumbnail.show && <MainMenuButton iconName={faPhotoVideo} stateName={MainMenuStateNames.thumbnail}/>}\n      <MainMenuButton iconName={faSignOutAlt} stateName={MainMenuStateNames.finish}/>\n    </nav>\n  );\n};\n\n/**\n * A button to set the state of the app\n * @param param0\n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: mainMenu[\"value\"]}> = ({iconName, stateName}) => {\n\n  const { t } = useTranslation();\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const onMenuItemClicked = () => {\n    dispatch(setState(stateName));\n    // Reset multi-page content to their first page\n    if (stateName === MainMenuStateNames.finish) {\n      dispatch(setPageNumber(0))\n    }\n    // Halt ongoing events\n    dispatch(setIsPlaying(false))\n  }\n\n  const mainMenuButtonStyle = css({\n    width: '100%',\n    height: '100px',\n    ...(activeState === stateName) && {\n      backgroundColor: '#DDD',\n    },\n    flexDirection: 'column' as const,\n  });\n\n  var buttonString = t(\n        \"mainMenu.\" + stateName.toLowerCase().replace(/ +/, \"-\") + \"-button\",\n        \"Could not load String value\");\n\n  return (\n    <li css={[basicButtonStyle, mainMenuButtonStyle]}\n      role=\"menuitem\" tabIndex={0}\n      onClick={ onMenuItemClicked }\n      onKeyDown={(event: React.KeyboardEvent<HTMLLIElement>) => { if (event.key === \"Enter\") {\n        onMenuItemClicked()\n      }}}\n      >\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{buttonString}</div>\n    </li>\n  );\n};\n\nexport default MainMenu;\n","/**\n * Contains mappings for special keyboard controls, beyond what is usually expected of a webpage\n * Learn more about keymaps at https://github.com/greena13/react-hotkeys#defining-key-maps (12.03.2021)\n */\nimport { KeyMap } from \"react-hotkeys\";\nimport { isMacOs } from 'react-device-detect';\n\n/**\n * Helper function that rewrites keys based on the OS\n */\n const rewriteKeys = (key: string) => {\n  let newKey = key\n  if (isMacOs) {\n    newKey = newKey.replace(\"Alt\", \"Option\")\n  }\n\n  return newKey\n}\n\n/**\n * (Semi-) global map for the buttons in the cutting view\n */\nexport const cuttingKeyMap: KeyMap = {\n  cut: rewriteKeys(\"Control+Alt+c\"),\n  delete: rewriteKeys(\"Control+Alt+d\"),\n  mergeLeft: rewriteKeys(\"Control+Alt+n\"),\n  mergeRight: rewriteKeys(\"Control+Alt+m\"),\n  preview: rewriteKeys(\"Control+Alt+p\"),\n  play: rewriteKeys(\"Space\"),\n}\n\n/**\n * (Semi-) global map for moving the scrubber\n */\nexport const scrubberKeyMap: KeyMap = {\n  left: [rewriteKeys(\"Control+Alt+j\"), \"ArrowLeft\"],\n  right: [rewriteKeys(\"Control+Alt+l\"), \"ArrowRight\"],\n  increase: [rewriteKeys(\"Control+Alt+i\"), \"ArrowUp\"],\n  decrease: [rewriteKeys(\"Control+Alt+k\"), \"ArrowDown\"],\n}","import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\nimport { httpRequestState }  from '../types'\nimport { settings } from '../config';\n\nexport interface Catalog {\n  fields: MetadataField[],\n  flavor: string, // \"dublincore/episode\"\n  title: string,  // name identifier\n}\n\nexport interface MetadataField {\n  readOnly: boolean,\n  id: string      // name\n  label: string   // name identifier\n  type: string    // irrelevant?\n  value: string,\n  required: boolean,\n  collection: any | undefined,\n}\n\n// interface metadata {\n//   title: string,\n//   subject: string,\n//   description: string,\n//   language: string,\n//   languageOptions: string[],\n//   rightsHolder: string,\n//   license: string,\n//   licenseOptions: string[],\n//   isPartOf: string,\n//   creator: string,\n//   creatorOptions: string[],\n//   contributor: string,\n//   contributorOptions: string[],\n//   startDate: Date,\n//   duration: string,\n//   location: string,\n//   source: string,\n//   created: Date,\n//   publisher: string,\n//   identifier: string,\n// }\n\ninterface metadata {\n  catalogs: Catalog[]\n  hasChanges: boolean         // Did user make changes to metadata view since last save\n}\n\ninterface postRequestState {\n  postStatus: 'idle' | 'loading' | 'success' | 'failed',\n  postError: string | undefined,\n}\n\n// TODO: Create an 'httpRequestState' array or something\nconst initialState: metadata & httpRequestState & postRequestState = {\n  catalogs: [],\n  hasChanges: false,\n\n  status: 'idle',\n  error: undefined,\n\n  postStatus: 'idle',\n  postError: undefined,\n}\n\nexport const fetchMetadata = createAsyncThunk('metadata/fetchMetadata', async () => {\n  if (!settings.mediaPackageId) {\n    throw new Error(\"Missing mediaPackageId\")\n  }\n\n  const response = await client.get(`${settings.opencast.url}/editor/${settings.mediaPackageId}/metadata.json`)\n  return response\n})\n\nexport const postMetadata = createAsyncThunk('metadata/postMetadata', async (_, { getState }) => {\n  if (!settings.mediaPackageId) {\n    throw new Error(\"Missing mediaPackageId\")\n  }\n\n  // TODO: Get only metadataState instead of all states\n  const allStates = getState() as { metadataState: { catalogs: metadata[\"catalogs\"] } }\n\n  const response = await client.post(`${settings.opencast.url}/editor/${settings.mediaPackageId}/metadata.json`,\n    allStates.metadataState.catalogs\n  )\n\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n */\nconst metadataSlice = createSlice({\n  name: 'metadataState',\n  initialState,\n  reducers: {\n    setFieldValue: (state, action: any) => {\n      state.catalogs[action.payload.catalogIndex].fields[action.payload.fieldIndex].value = action.payload.value\n      state.hasChanges = true\n    },\n    setFieldReadonly: (state, action: any) => {\n      state.catalogs[action.payload.catalogIndex].fields[action.payload.fieldIndex].readOnly = action.payload.value\n    },\n    setHasChanges: (state, action: PayloadAction<metadata[\"hasChanges\"]>) => {\n      state.hasChanges = action.payload\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      fetchMetadata.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchMetadata.fulfilled, (state, action) => {\n        state.catalogs = action.payload\n\n        state.status = 'success'\n    })\n    builder.addCase(\n      fetchMetadata.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n    builder.addCase(\n      postMetadata.pending, (state, action) => {\n        state.postStatus = 'loading'\n    })\n    builder.addCase(\n      postMetadata.fulfilled, (state, action) => {\n        state.postStatus = 'success'\n    })\n    builder.addCase(\n      postMetadata.rejected, (state, action) => {\n        state.postStatus = 'failed'\n        state.postError = action.error.message\n    })\n  }\n})\n\nexport const { setFieldValue, setHasChanges, setFieldReadonly } = metadataSlice.actions\n\nexport const selectCatalogs = (state: { metadataState: { catalogs: metadata[\"catalogs\"] } }) =>\n  state.metadataState.catalogs\nexport const hasChanges = (state: { metadataState: { hasChanges: metadata[\"hasChanges\"] } }) =>\n  state.metadataState.hasChanges\nexport const selectGetStatus = (state: { metadataState: { status: httpRequestState[\"status\"] } }) =>\n  state.metadataState.status\nexport const selectGetError = (state: { metadataState: { error: httpRequestState[\"error\"] } }) =>\n  state.metadataState.error\nexport const selectPostStatus = (state: { metadataState: { postStatus: postRequestState[\"postStatus\"] } }) =>\n  state.metadataState.postStatus\nexport const selectPostError = (state: { metadataState: { postError: postRequestState[\"postError\"] } }) =>\n  state.metadataState.postError\n\nexport const selectTitleFromEpisodeDc = (state: { metadataState: { catalogs: metadata[\"catalogs\"] } }) => {\n  for (const catalog of state.metadataState.catalogs) {\n    if (catalog.flavor === \"dublincore/episode\") {\n      for (const field of catalog.fields) {\n        if (field.id === \"title\") {\n          return field.value\n        }\n      }\n    }\n  }\n\n  return undefined\n}\n\nexport default metadataSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface error {\n  error: boolean,\n  errorMessage: string,\n  errorDetails: string | undefined,\n}\n\nconst initialState: error = {\n  error: false,\n  errorMessage: \"Unknown error\",\n  errorDetails: \"\",\n}\n\n/**\n * Slice for the error page state\n */\nexport const errorSlice = createSlice({\n  name: 'errorState',\n  initialState,\n  reducers: {\n    setError: (state, action: PayloadAction<{\n      error: error[\"error\"],\n      errorMessage: error[\"errorMessage\"],\n      errorDetails: error[\"errorDetails\"]\n    }>) => {\n      state.error = action.payload.error;\n      state.errorMessage = action.payload.errorMessage;\n      state.errorDetails = action.payload.errorDetails;\n    },\n  }\n})\n\nexport const { setError, } = errorSlice.actions\n\n// Export Selectors\nexport const selectIsError = (state: { errorState: { error: error[\"error\"] }; }) => state.errorState.error\nexport const selectErrorMessage = (state: { errorState: { errorMessage: error[\"errorMessage\"] }; }) => state.errorState.errorMessage\nexport const selectErrorDetails = (state: { errorState: { errorDetails: error[\"errorDetails\"] }; }) => state.errorState.errorDetails\n\nexport default errorSlice.reducer\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { css } from '@emotion/react'\n\nimport { httpRequestState, MainMenuStateNames } from '../types'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faToggleOn, faToggleOff} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectCurrentlyAtInSeconds, setIsPlaying, setCurrentlyAtInSeconds,\n  fetchVideoInformation, selectVideoURL, selectVideoCount, selectDurationInSeconds, selectTitle, selectPresenters,\n  setPreviewTriggered, selectPreviewTriggered, selectIsPlayPreview, setIsPlayPreview, setAspectRatio, selectAspectRatio, selectDuration, setClickTriggered, selectClickTriggered\n} from '../redux/videoSlice'\n\nimport ReactPlayer, { Config } from 'react-player'\n\nimport { roundToDecimalPlace, convertMsToReadableString } from '../util/utilityFunctions'\nimport { basicButtonStyle, flexGapReplacementStyle } from \"../cssStyles\";\n\nimport { GlobalHotKeys } from 'react-hotkeys';\nimport { selectMainMenuState } from \"../redux/mainMenuSlice\";\nimport { cuttingKeyMap } from \"../globalKeys\";\nimport { SyntheticEvent } from \"react\";\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\nimport { selectTitleFromEpisodeDc } from \"../redux/metadataSlice\";\nimport { setError } from \"../redux/errorSlice\";\n\n/**\n * Container for the videos and their controls\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n  const error = useSelector((state: { videoState: { error: httpRequestState[\"error\"] } }) => state.videoState.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoInformation())\n    } else if (videoURLStatus === 'failed') {\n      dispatch(setError({error: true, errorMessage: t(\"video.comError-text\"), errorDetails: error}))\n    }\n  }, [videoURLStatus, dispatch, error, t])\n\n  // Update based on current fetching status\n  // let content\n  // if (videoURLStatus === 'loading') {\n  //   content = <div className=\"loader\">Loading...</div>\n  // } else if (videoURLStatus === 'success') {\n  //   content = \"\"//<div className=\"loader\">Success...</div>\n  // } else if (videoURLStatus === 'failed') {\n  //   content = <div>{error}</div>\n  // }\n\n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {\n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} dataKey={i} url={videoURLs[i]} isPrimary={i === 0}/>);\n  }\n\n  // Style\n  const videoAreaStyle = css({\n    display: 'flex',\n    width: 'auto',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '0px',\n    borderBottom: '1px solid #BBB',\n  });\n\n  const videoPlayerAreaStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  });\n\n  return (\n    <div css={videoAreaStyle}>\n      <VideoHeader />\n      <div css={videoPlayerAreaStyle}>\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param {string} url - URL to load video from\n * @param {boolean} isPrimary - If the player is the main control\n */\nconst VideoPlayer: React.FC<{dataKey: number, url: string, isPrimary: boolean}> = ({dataKey, url, isPrimary}) => {\n\n  const { t } = useTranslation();\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAtInSeconds)\n  const duration  = useSelector(selectDurationInSeconds)\n  const previewTriggered = useSelector(selectPreviewTriggered)\n  const clickTriggered = useSelector(selectClickTriggered)\n  const aspectRatio = useSelector(selectAspectRatio)\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n  const [ready, setReady] = useState(false);\n  const [errorState, setError] = useState(false);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    if (isPrimary) {\n      // Only update redux if there was a substantial change\n      if (roundToDecimalPlace(currentlyAt, 3) !== roundToDecimalPlace(state.playedSeconds, 3)) {\n        dispatch(setCurrentlyAtInSeconds(state.playedSeconds))\n      }\n    }\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n\n    if (ref.current && ref.current.getInternalPlayer()) {\n      let w = (ref.current.getInternalPlayer() as HTMLVideoElement).videoWidth\n      let h = (ref.current.getInternalPlayer() as HTMLVideoElement).videoHeight\n      dispatch(setAspectRatio({dataKey, width: w, height: h}))\n    }\n  }\n\n  const onEndedCallback = () => {\n    if (isPrimary) {\n      dispatch(setIsPlaying(false));\n      dispatch(setCurrentlyAtInSeconds(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n    }\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if (!isPlaying && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n    if (previewTriggered && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n      dispatch(setPreviewTriggered(false))\n    }\n    if (clickTriggered && ref.current && ready) {\n      ref.current.seekTo(currentlyAt, \"seconds\")\n      dispatch(setClickTriggered(false))\n    }\n  })\n\n  const onErrorCallback = (e: any) => {\n    setError(true)\n  }\n\n  // Skip player when navigating page with keyboard\n  const playerConfig: Config = {\n    file: { attributes: { tabIndex: '-1' }}\n  }\n\n  const errorBoxStyle = css({\n    ...(!errorState) && {display: \"none\"},\n    borderColor: 'red',\n    borderStyle: 'dashed',\n    fontWeight: 'bold',\n    padding: '10px',\n  })\n\n  const playerWrapper = css({\n    position: 'relative',\n    width: '100%',\n    paddingTop: aspectRatio + '%',\n  });\n\n  const reactPlayerStyle = css({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n  })\n\n  const render = () => {\n    if (!errorState) {\n      return(\n        <div css={playerWrapper}>\n          <ReactPlayer url={url}\n            css={reactPlayerStyle}\n            ref={ref}\n            width='100%'\n            height='100%'\n            playing={isPlaying}\n            muted={!isPrimary}\n            onProgress={onProgressCallback}\n            progressInterval={100}\n            onReady={onReadyCallback}\n            onEnded={onEndedCallback}\n            onError={onErrorCallback}\n            tabIndex={-1}\n            config={playerConfig}\n            disablePictureInPicture\n          />\n        </div>\n      );\n    } else {\n      return (\n        <div css={errorBoxStyle} role=\"alert\">\n          <span>{t(\"video.loadError-text\")} </span>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <>\n      {render()}\n    </>\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video>\n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * Flexbox magic keeps the play button at the center\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  const videoControlsRowStyle = css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '20px',\n    ...(flexGapReplacementStyle(50, false)),\n  })\n\n  const leftSideBoxStyle = css({\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'flex-end'\n  })\n\n  const rightSideBoxStyle = css({\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'flex-start'\n  })\n\n  return (\n    <div css={videoControlsRowStyle} title={t(\"video.controls-tooltip\")}>\n      <div css={leftSideBoxStyle}>\n        <PreviewMode />\n      </div>\n      <PlayButton />\n      <div css={rightSideBoxStyle}>\n        <TimeDisplay />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Enable/Disable Preview Mode\n */\nconst PreviewMode: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlayPreview = useSelector(selectIsPlayPreview)\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  // Change preview mode from \"on\" to \"off\" and vice versa\n  const switchPlayPreview = (event: KeyboardEvent | SyntheticEvent, ref: React.RefObject<HTMLDivElement> | undefined) => {\n    event.preventDefault()                      // Prevent page scrolling due to Space bar press\n    event.stopPropagation()                     // Prevent video playback due to Space bar press\n    dispatch(setIsPlayPreview(!isPlayPreview))\n\n    // Lose focus if clicked by mouse\n    if (ref) {\n      ref.current?.blur()\n    }\n  }\n\n  // Maps functions to hotkeys\n  const handlers = {\n    // preview: switchPlayPreview,\n    preview: (keyEvent?: KeyboardEvent) => { if(keyEvent) { switchPlayPreview(keyEvent, undefined) } }\n  }\n\n  const previewModeStyle = css({\n    cursor: \"pointer\",\n    display: 'flex',\n    ...(flexGapReplacementStyle(10, false)),\n    justifyContent: 'center',\n    alignItems: 'center'\n  })\n\n  const switchIconStyle = css({\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.05)',\n    },\n  })\n\n  return (\n    <div css={previewModeStyle}\n      ref={ref}\n      title={t(\"video.previewButton-tooltip\", { status: (isPlayPreview ? \"on\" : \"off\"), hotkeyName: cuttingKeyMap[handlers.preview.name] })}\n      role=\"switch\" aria-checked={isPlayPreview} tabIndex={0} aria-hidden={false}\n      aria-label={t(\"video.previewButton-aria\", { hotkeyName: cuttingKeyMap[handlers.preview.name] })}\n      onClick={ (event: SyntheticEvent) => switchPlayPreview(event, ref) }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \") {\n        switchPlayPreview(event, undefined)\n      }}}>\n      <GlobalHotKeys keyMap={cuttingKeyMap} handlers={mainMenuState === MainMenuStateNames.cutting ? handlers: {}} allowChanges={true} />\n      <div css={{display: 'inline-block', flexWrap: 'nowrap'}}>\n        {t(\"video.previewButton\")}\n      </div>\n      <FontAwesomeIcon css={switchIconStyle} icon={isPlayPreview ? faToggleOn : faToggleOff} size=\"1x\"/>\n    </div>\n  );\n}\n\n/**\n * Start/Pause playing the videos\n */\nconst PlayButton: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  // Change play mode from \"on\" to \"off\" and vice versa\n  const switchIsPlaying = (event: KeyboardEvent | SyntheticEvent) => {\n    event.preventDefault()                      // Prevent page scrolling due to Space bar press\n    dispatch(setIsPlaying(!isPlaying))\n  }\n\n  // Maps functions to hotkeys\n  const handlers = {\n    play: (keyEvent?: KeyboardEvent) => { if(keyEvent) { switchIsPlaying(keyEvent) } }\n  }\n\n  return (\n    <>\n    <GlobalHotKeys keyMap={cuttingKeyMap} handlers={mainMenuState === MainMenuStateNames.cutting ? handlers: {}} allowChanges={true} />\n    <FontAwesomeIcon css={[basicButtonStyle, {justifySelf: 'center'}]} icon={isPlaying ? faPause : faPlay} size=\"2x\"\n      title={t(\"video.playButton-tooltip\")}\n      role=\"button\" aria-pressed={isPlaying} tabIndex={0} aria-hidden={false}\n      aria-label={t(\"video.playButton-tooltip\")}\n      onClick={(event: SyntheticEvent) => { switchIsPlaying(event) }}\n      onKeyDown={(event: React.KeyboardEvent) => { if (event.key === \"Enter\") { // \"Space\" is handled by global key\n        switchIsPlaying(event)\n      }}}\n    />\n    </>\n  );\n}\n\n/**\n * Live update for the current time\n */\nconst TimeDisplay: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  // Init redux variables\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  return (\n    <div css={{display: 'flex', flexDirection: 'row', gap: '5px'}}>\n      <time css={{display: 'inline-block', width: '100px'}}\n        title={t(\"video.time-duration-tooltip\")}\n        tabIndex={0} role=\"timer\" aria-label={t(\"video.time-aria\")+\": \" + convertMsToReadableString(currentlyAt)}>\n        {new Date((currentlyAt ? currentlyAt : 0)).toISOString().substr(11, 12)}\n      </time>\n      {\" / \"}\n      <div tabIndex={0} aria-label={t(\"video.duration-aria\")+\": \" + convertMsToReadableString(duration)}>\n        {new Date((duration ? duration : 0)).toISOString().substr(11, 12)}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Displays elements above the video, e.g. title\n */\nconst VideoHeader: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  const title = useSelector(selectTitle)\n  const metadataTitle = useSelector(selectTitleFromEpisodeDc)\n  const presenters = useSelector(selectPresenters)\n\n  const titleStyle = css({\n    display: 'inline-block',\n    padding: '15px',\n    overflow: 'hidden',\n    whiteSpace: \"nowrap\",\n    textOverflow: 'ellipsis',\n    maxWidth: '500px',\n  })\n\n  const titleStyleBold = css({\n    fontWeight: 'bold',\n    fontSize: '24px',\n    verticalAlign: '-2.5px',\n  })\n\n  let presenter_header;\n  if (presenters && presenters.length) {\n      presenter_header = <div css={titleStyle} title={t(\"video.presenter-tooltip\")}>by {presenters.join(\", \")}</div>\n  }\n  return (\n    <div title={t(\"video.area-tooltip\")} css={{fontSize: '16px'}}>\n      <div css={[titleStyle, titleStyleBold]} title={t(\"video.title-tooltip\")}>\n        {metadataTitle ? metadataTitle : title}\n      </div>\n      {presenter_header}\n    </div>\n  );\n}\n\nexport default Video;\n","/**\n * Big thanks to Duncan \"slampunk\" Smith for writing this code and allowing it\n * to be used for this application.\n * duncan83@gmail.com\n */\n\nimport { AudioContext } from 'standardized-audio-context';\n\nexport function Waveform(opts) {\n  this.audioContext = new AudioContext();\n  this.oCanvas = document.createElement('canvas');\n  this.buffer = {};\n  this.WIDTH = 0;\n  this.HEIGHT = 0;\n  this.channelData = [];\n  this.waveformImage = '';\n  this.audioBuffer = null;\n\n  this.aveRMS = 0;\n  this.peakRMS = 0;\n\n  this.numberSamples = 100000;\n  this.waveformType = 'img';\n  this.drawWaveform = this.drawCanvasWaveform;\n\n  if (opts.width && opts.height) {\n    this.setDimensions(opts.width, opts.height);\n  }\n  if (opts.samples) {\n    this.numberSamples = opts.samples;\n  }\n  if (opts.type && opts.type === 'svg') {\n    this.waveformType = 'svg';\n    this.drawWaveform = this.delegateToWorker;\n    this.worker = null;\n  }\n  if (opts.media) {\n    this.generateWaveform(opts.media)\n      .then(() => {\n        this.getAudioData();\n        this.drawWaveform();\n        if (this.waveformType !== 'svg') {\n          _completeFuncs.forEach(fn => {\n            fn(this.waveformImage || this.svgPath, this.waveformType);\n          });\n        }\n      })\n      .catch((e) => {\n        console.log(\"Waveform Worker: \" + e);\n        this._error = e.toString()\n        this.onerror.forEach(fn => fn(e.toString()));\n      });\n  }\n\n  var _completeFuncs = [];\n  Object.defineProperty(this, 'oncomplete', {\n    get: function() {\n      return _completeFuncs;\n    },\n    set: function(fn, opt) {\n      if (typeof fn == 'function') {\n        if (this.waveformImage || this.svgPath) {\n          fn(this.waveformImage || this.svgPath, this.svgLength);\n          return;\n        }\n\n        _completeFuncs.push(fn);\n      }\n    }\n  });\n\n  var _error = \"\";\n  var _errorFuncs = [];\n  Object.defineProperty(this, 'onerror', {\n    get: function() {\n      return _errorFuncs;\n    },\n    set: function(fn, opt) {\n      if (typeof fn == 'function') {\n        if (this._error && this._error !== \"\") {\n          fn(_error);\n          return;\n        }\n      }\n\n      _errorFuncs.push(fn);\n    }\n  });\n}\n\nWaveform.prototype = {\n  constructor: Waveform,\n  setDimensions: function(width, height) {\n    this.oCanvas.width = width;\n    this.WIDTH = width;\n    this.oCanvas.height = height;\n    this.HEIGHT = height;\n    this.ocCtx = this.oCanvas.getContext('2d');\n  },\n  decodeAudioData: function(arraybuffer) {\n    return new Promise((resolve, reject) => {\n      new Promise((res, rej) => {\n        if (arraybuffer instanceof ArrayBuffer) {\n          res(arraybuffer);\n        }\n        else if (arraybuffer instanceof Blob) {\n          let reader = new FileReader();\n          reader.onload = function() {\n            res(reader.result);\n          }\n          reader.readAsArrayBuffer(arraybuffer);\n        }\n      })\n      .then(buffer => {\n        this.audioContext.decodeAudioData(buffer)\n          .then(audiobuffer => {\n            this.buffer = audiobuffer;\n            resolve();\n          })\n          .catch(e => {\n            reject(e);\n          })\n      })\n      .catch(e => {\n        reject(e);\n      })\n    })\n  },\n  getAudioData: function(buffer) {\n    buffer = buffer || this.buffer;\n    this.channelData = this.dropSamples(buffer.getChannelData(0), this.numberSamples);\n  },\n  drawCanvasWaveform: function(amp) {\n    amp = amp || 1;\n    this.ocCtx.fillStyle = '#FFFFFF00'; //'#b7d8f9';\n    this.ocCtx.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n    this.ocCtx.lineWidth = 1;\n    this.ocCtx.strokeStyle = 'black'; //'#38597a';\n    let sliceWidth = this.WIDTH * 1.0 / this.channelData.length;\n    let x = 0;\n\n    this.ocCtx.beginPath();\n    this.ocCtx.moveTo(x, this.channelData[0] * this.HEIGHT / 128.0 / 2);\n\n    this.channelData.forEach(sample => {\n      let v = sample * amp;\n      let y = this.HEIGHT * (1 + v) / 2;\n      this.ocCtx.lineTo(x, y);\n      this.aveRMS += sample * sample;\n      this.peakRMS = Math.max(sample * sample, this.peakRMS);\n      x += sliceWidth;\n    });\n    this.ocCtx.lineTo(this.WIDTH, this.HEIGHT/2);\n    this.ocCtx.stroke();\n    this.aveRMS = Math.sqrt(this.aveRMS / this.channelData.length);\n    this.aveDBs = 20 * Math.log(this.aveRMS) / Math.log(10);\n    this.waveformImage = this.oCanvas.toDataURL();\n  },\n  dropSamples: function(data, requestedLength) {\n    let divider = Math.max(parseInt(data.length / requestedLength), 1);\n    return data.filter((sample, i) => i % divider === 0);\n  },\n  generateWaveform: function(arraybuffer) {\n    return this.decodeAudioData(arraybuffer);\n  },\n  delegateToWorker: function() {\n    if (!this.worker) {\n      this.worker = new Worker('../util/svgworker.js');\n      this.worker.addEventListener('message', this.workerCommunication.bind(this), false);\n      this.worker.postMessage(this.channelData);\n    }\n  },\n  workerCommunication: function(e) {\n    switch(e.data.type) {\n      case 'path':\n        this.setSVGpath(e.data.path, e.data.length);\n        this.worker.removeEventListener('message', this.workerCommunication.bind(this), false);\n        this.worker.terminate();\n        this.worker = null;\n        break;\n      default:\n        break;\n    }\n  },\n  setSVGpath: function(path, len) {\n    this.svgPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    this.svgLength = len;\n\n    this.svgPath.setAttribute('d', path);\n    this.svgPath.setAttribute('vector-effect', 'non-scaling-stroke');\n    this.svgPath.setAttribute('stroke-width', '0.5px');\n\n    this.oncomplete.forEach(fn => fn(this.svgPath, this.svgLength));\n  }\n};\n","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/react'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment, httpRequestState, MainMenuStateNames } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, selectActiveSegmentIndex, selectDuration,\n  setIsPlaying, selectVideoURL, setCurrentlyAt, setClickTriggered\n} from '../redux/videoSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport { Waveform } from '../util/waveform'\nimport { convertMsToReadableString } from '../util/utilityFunctions';\nimport { GlobalHotKeys } from 'react-hotkeys';\nimport { scrubberKeyMap } from '../globalKeys';\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\nimport { selectMainMenuState } from '../redux/mainMenuSlice';\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n * TODO: Figure out why ResizeObserver does not update anymore if we stop passing the width to the SegmentsList\n */\nconst Timeline: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const duration = useSelector(selectDuration)\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative',     // Need to set position for Draggable bounds to work\n    height: '250px',\n    width: '100%',\n  });\n\n  // Update the current time based on the position clicked on the timeline\n  const setCurrentlyAtToClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    let rect = e.currentTarget.getBoundingClientRect()\n    let offsetX = e.clientX - rect.left\n    dispatch(setClickTriggered(true))\n    dispatch(setCurrentlyAt((offsetX / width) * (duration)))\n  }\n\n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\" onMouseDown={e => setCurrentlyAtToClick(e)}>\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}} >\n      <Waveforms />\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * @param param0\n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  const { t } = useTranslation();\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)  // For ARIA information display\n  const segments = useSelector(selectSegments)                      // For ARIA information display\n  const mainMenuState = useSelector(selectMainMenuState)            // For hotkey enabling/disabling\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,});\n  const [isGrabbed, setIsGrabbed] = useState(false)\n  const [wasPlayingWhenGrabbed, setWasPlayingWhenGrabbed] = useState(false)\n  const [keyboardJumpDelta, setKeyboardJumpDelta] = useState(1000)  // In milliseconds. For keyboard navigation\n  const wasCurrentlyAtRef = useRef(0)\n  const nodeRef = React.useRef(null); // For supressing \"ReactDOM.findDOMNode() is deprecated\" warning\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current && !isGrabbed) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // Reposition scrubber when the timeline width changes\n  useEffect(() => {\n    if(currentlyAt && duration) {\n      setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  const onControlledDrag = (e: any, position: any) => {\n    // Update position\n    const {x} = position\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)))\n  };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n  };\n\n  const onStartDrag = () => {\n    setIsGrabbed(true)\n\n    // Halt video playback\n    if (isPlaying) {\n      setWasPlayingWhenGrabbed(true)\n      dispatch(setIsPlaying(false))\n    } else {\n      setWasPlayingWhenGrabbed(false)\n    }\n  }\n\n  const onStopDrag = (e: any, position: any) => {\n    // Update position\n    const {x} = position;\n    setControlledPosition({x, y: 0});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n\n    setIsGrabbed(false)\n    // Resume video playback\n    if (wasPlayingWhenGrabbed) {\n      dispatch(setIsPlaying(true))\n    }\n  }\n\n  // Callbacks for keyboard controls\n  // TODO: Better increases and decreases than ten intervals\n  // TODO: Additional helpful controls (e.g. jump to start/end of segment/next segment)\n  const handlers = {\n    left: () => dispatch(setCurrentlyAt(Math.max(currentlyAt - keyboardJumpDelta, 0))),\n    right: () => dispatch(setCurrentlyAt(Math.min(currentlyAt + keyboardJumpDelta, duration))),\n    increase: () => setKeyboardJumpDelta(keyboardJumpDelta => Math.min(keyboardJumpDelta * 10, 1000000)),\n    decrease: () => setKeyboardJumpDelta(keyboardJumpDelta => Math.max(keyboardJumpDelta / 10, 1))\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'black',\n    height: '240px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 2,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  });\n\n  const scrubberDragHandleStyle = css({\n    // Base style\n    background: \"black\",\n    display: \"inline-block\",\n    height: \"10px\",\n    position: \"relative\",\n    width: \"20px\",\n    \"&:after\": {\n      borderTop: '10px solid black',\n      borderLeft: '10px solid transparent',\n      borderRight: '10px solid transparent',\n      content: '\"\"',\n      height: 0,\n      left: 0,\n      position: \"absolute\",\n      top: \"10px\",\n      width: 0,\n    },\n    // Animation\n    cursor: isGrabbed ? \"grabbing\" : \"grab\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(0.7) rotate(90deg)',\n    paddingRight: '5px',\n    color: \"white\"\n  })\n\n  // // Possible TODO: Find a way to use ariaLive in a way that only the latest change is announced\n  // const keyboardUpdateMessage = () => {\n  //   return currentlyAt +  \" Milliseconds\"\n  // }\n\n  return (\n    <GlobalHotKeys keyMap={scrubberKeyMap} handlers={mainMenuState === MainMenuStateNames.cutting ? handlers: {}} allowChanges={true}>\n      <Draggable\n        onDrag={onControlledDrag}\n        onStart={onStartDrag}\n        onStop={onStopDrag}\n        axis=\"x\"\n        bounds=\"parent\"\n        position={controlledPosition}\n        nodeRef={nodeRef}\n        >\n          <div ref={nodeRef} css={scrubberStyle}>\n\n            <div css={scrubberDragHandleStyle} aria-grabbed={isGrabbed}\n              aria-label={t(\"timeline.scrubber-text-aria\",\n                         {currentTime: convertMsToReadableString(currentlyAt), segment: activeSegmentIndex,\n                          segmentStatus: (segments[activeSegmentIndex].deleted ? \"Deleted\" : \"Alive\"),\n                          moveLeft: scrubberKeyMap[handlers.left.name],\n                          moveRight: scrubberKeyMap[handlers.right.name],\n                          increase: scrubberKeyMap[handlers.increase.name],\n                          decrease: scrubberKeyMap[handlers.decrease.name] })}\n              tabIndex={0}>\n              <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n            </div>\n          </div>\n      </Draggable>\n    </GlobalHotKeys>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cutting\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  const { t } = useTranslation();\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)\n  const activeSegmentIndex = useSelector(selectActiveSegmentIndex)\n\n  /**\n   * Returns a background color based on whether the segment is to be deleted\n   * and whether the segment is currently active\n   */\n  const bgColor = (deleted: boolean, active: boolean) => {\n    if (!deleted && !active) {\n      return 'rgba(0, 0, 255, 0.4)'\n    } else if (deleted && !active) {\n      return `repeating-linear-gradient(\n                -45deg,\n                rgba(255, 45, 45, 0.4),\n                rgba(255, 45, 45, 0.4) 10px,\n                rgba(255, 0, 0, 0.4) 10px,\n                rgba(255, 0, 0, 0.4) 20px);`\n    } else if (!deleted && active) {\n      return 'rgba(0, 0, 200, 0.4)'\n    } else if (deleted && active) {\n      return `repeating-linear-gradient(\n                -45deg,\n                rgba(200, 45, 45, 0.4),\n                rgba(200, 45, 45, 0.4) 10px,\n                rgba(200, 0, 0, 0.4) 10px,\n                rgba(200, 0, 0, 0.4) 20px);`\n    }\n  }\n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment, index: number) => (\n        <div key={segment.id} title={t(\"timeline.segment-tooltip\", {segment: index})}\n          aria-label={t(\"timeline.segments-text-aria\",\n                     {segment: index,\n                      segmentStatus: (segment.deleted ? \"Deleted\" : \"Alive\"),\n                      start: convertMsToReadableString(segment.start),\n                      end: convertMsToReadableString(segment.end) })}\n          tabIndex={0}\n        css={{\n          background: bgColor(segment.deleted, activeSegmentIndex === index),\n          borderRadius: '5px',\n          borderStyle: activeSegmentIndex === index ? 'dashed' : 'solid',\n          borderColor: 'white',\n          borderWidth: '1px',\n          boxSizing: 'border-box',\n          width: ((segment.end - segment.start) / duration) * 100 + '%',\n          height: '230px',\n          zIndex: 1,\n        }}>\n        </div>\n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px',\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\n/**\n * Generates waveform images and displays them\n */\nconst Waveforms: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  const videoURLs = useSelector(selectVideoURL)\n  const videoURLStatus = useSelector((state: { videoState: { status: httpRequestState[\"status\"] } }) => state.videoState.status);\n\n  // Update based on current fetching status\n  const [images, setImages] = useState<string[]>([])\n  const [waveformWorkerError, setWaveformWorkerError] = useState<boolean>(false)\n\n  const waveformDisplayTestStyle = css({\n    display: 'flex',\n    flexDirection: 'column',\n    position: \"absolute\" as \"absolute\",\n    justifyContent: 'center',\n    ...(images.length <= 0) && {alignItems: 'center'},  // Only center during loading\n    width: '100%',\n    height: '230px',\n    paddingTop: '10px',\n  });\n\n  // When the URLs to the videos are fetched, generate waveforms\n  useEffect( () => {\n    if (videoURLStatus === 'success') {\n      const images: string[] = []    // Store local paths to image files\n      let waveformsProcessed : number = 0  // Counter for checking if all workers are done\n\n      // Only display the waveform of the first video we get\n      const onlyOneURL = [videoURLs[0]]\n\n      onlyOneURL.forEach((videoURL, _index, array) => {\n        // Set up blob request\n        var blob = null\n        var xhr = new XMLHttpRequest()\n        xhr.open(\"GET\", videoURL)\n        xhr.responseType = \"blob\"\n        xhr.onload = function()\n        {\n          blob = xhr.response\n          var file = new File([blob], blob)\n\n          // Start waveform worker with blob\n          const waveformWorker : any = new Waveform({type: 'img', width: '2000', height: '230', samples: 100000, media: file})\n\n          waveformWorker.onerror = function(error: string) {\n            setWaveformWorkerError(true)\n            console.log(\"Waveform could not be generated:\" + error)\n          }\n\n          // When done, save path to generated waveform img\n          waveformWorker.oncomplete = function(image: any, numSamples: any) {\n            images.push(image)\n            waveformsProcessed++\n            // If all images are generated, rerender\n            if (waveformsProcessed === array.length) {\n              setImages(images)\n            }\n          }\n        }\n\n        xhr.send()\n      })\n    }\n  }, [videoURLStatus, videoURLs]);\n\n\n  const renderImages = () => {\n    if (images.length > 0) {\n      return (\n        images.map((image, index) =>\n          <img key={index} alt='Waveform' src={image ? image : \"\"} css={{minHeight: 0}}></img>\n        )\n      );\n    } else if (waveformWorkerError) {\n      return (\n        <div>{\"Waveform could not be generated\"}</div>\n      );\n    }\n    else {\n      return (\n        <>\n          <FontAwesomeIcon icon={faSpinner} spin size=\"3x\"/>\n          <div>{t(\"timeline.generateWaveform-text\")}</div>\n        </>\n      );\n    }\n  }\n\n  return (\n  <div css={waveformDisplayTestStyle}>\n    {renderImages()}\n  </div>\n  );\n}\n\nexport default Timeline;\n","import React, { SyntheticEvent } from \"react\";\n\nimport { basicButtonStyle, flexGapReplacementStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition,\n  faCut,\n  faStepBackward,\n  faStepForward,\n  faTrash,\n  faTrashRestore,\n  } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/react'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  cut, markAsDeletedOrAlive, selectIsCurrentSegmentAlive, mergeLeft, mergeRight\n} from '../redux/videoSlice'\nimport { GlobalHotKeys, KeySequence } from \"react-hotkeys\";\nimport { selectMainMenuState } from \"../redux/mainMenuSlice\";\nimport { MainMenuStateNames } from \"../types\";\nimport { cuttingKeyMap } from \"../globalKeys\";\nimport { ActionCreatorWithoutPayload } from \"@reduxjs/toolkit\";\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  /**\n   * General action callback for cutting actions\n   * @param event event triggered by click or button press\n   * @param action redux event to dispatch\n   * @param ref Pass a reference if the clicked element should lose focus\n   */\n  const dispatchAction = (event: KeyboardEvent | SyntheticEvent, action: ActionCreatorWithoutPayload<string>, ref: React.RefObject<HTMLDivElement> | undefined) => {\n    event.preventDefault()                      // Prevent page scrolling due to Space bar press\n    event.stopPropagation()                     // Prevent video playback due to Space bar press\n    dispatch(action())\n\n    // Lose focus if clicked by mouse\n    if (ref) {\n      ref.current?.blur()\n    }\n  }\n\n  // Maps functions to hotkeys\n  const handlers = {\n    cut: (keyEvent?: KeyboardEvent | SyntheticEvent) => { if(keyEvent) { dispatchAction(keyEvent, cut, undefined) } },\n    delete: (keyEvent?: KeyboardEvent | SyntheticEvent) => { if(keyEvent) { dispatchAction(keyEvent, markAsDeletedOrAlive, undefined) } },\n    mergeLeft: (keyEvent?: KeyboardEvent | SyntheticEvent) => { if(keyEvent) { dispatchAction(keyEvent, mergeLeft, undefined) } },\n    mergeRight: (keyEvent?: KeyboardEvent | SyntheticEvent) => { if(keyEvent) { dispatchAction(keyEvent, mergeRight, undefined) } },\n  }\n\n  const cuttingStyle =  css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-between',\n    ...(flexGapReplacementStyle(30, true)),\n  })\n\n  const blockStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    ...(flexGapReplacementStyle(30, true)),\n  })\n\n  return (\n    <GlobalHotKeys keyMap={cuttingKeyMap} handlers={mainMenuState === MainMenuStateNames.cutting ? handlers: {}} allowChanges={true} >\n      <div css={cuttingStyle}>\n          <div css={blockStyle}>\n            <CuttingActionsButton iconName={faCut}\n              actionName=\"Cut\" actionHandler={dispatchAction} action={cut}\n              tooltip={t('cuttingActions.cut-tooltip', { hotkeyName: cuttingKeyMap[handlers.cut.name] })}\n              ariaLabelText={t('cuttingActions.cut-tooltip-aria', { hotkeyName: cuttingKeyMap[handlers.cut.name] })}\n            />\n            <MarkAsDeletedButton actionHandler={dispatchAction} action={markAsDeletedOrAlive} hotKeyName={cuttingKeyMap[handlers.delete.name]}/>\n            <CuttingActionsButton iconName={faStepBackward}\n              actionName=\"Merge Left\" actionHandler={dispatchAction} action={mergeLeft}\n              tooltip={t('cuttingActions.mergeLeft-tooltip', { hotkeyName: cuttingKeyMap[handlers.mergeLeft.name] })}\n              ariaLabelText={t('cuttingActions.mergeLeft-tooltip-aria', { hotkeyName: cuttingKeyMap[handlers.mergeLeft.name] })}\n            />\n            <CuttingActionsButton iconName={faStepForward}\n              actionName=\"Merge Right\" actionHandler={dispatchAction} action={mergeRight}\n              tooltip={t('cuttingActions.mergeRight-tooltip', { hotkeyName: cuttingKeyMap[handlers.mergeRight.name] })}\n              ariaLabelText={t('cuttingActions.mergeRight-tooltip-aria', { hotkeyName: cuttingKeyMap[handlers.mergeRight.name] })}\n            />\n          </div>\n          <div css={blockStyle}>\n            {/* <CuttingActionsButton iconName={faQuestion} actionName=\"Reset changes\" action={null}\n              tooltip=\"Not implemented\"\n              ariaLabelText=\"Reset changes. Not implemented\"\n            />\n            <CuttingActionsButton iconName={faQuestion} actionName=\"Undo\" action={null}\n              tooltip=\"Not implemented\"\n              ariaLabelText=\"Undo. Not implemented\"\n            /> */}\n          </div>\n      </div>\n    </GlobalHotKeys>\n  );\n};\n\n/**\n * CSS for cutting buttons\n */\nconst cuttingActionButtonStyle = {\n  padding: '16px',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n};\n\ninterface cuttingActionsButtonInterface {\n  iconName: IconDefinition,\n  actionName: string,\n  actionHandler: (event: KeyboardEvent | SyntheticEvent, action: ActionCreatorWithoutPayload<string>, ref: React.RefObject<HTMLDivElement> | undefined) => void,\n  action: ActionCreatorWithoutPayload<string>,\n  tooltip: string,\n  ariaLabelText: string,\n}\n\n/**\n * A button representing a single action a user can take while cutting\n * @param param0\n */\nconst CuttingActionsButton: React.FC<cuttingActionsButtonInterface> = ({iconName, actionName, actionHandler, action, tooltip, ariaLabelText}) => {\n  const ref = React.useRef<HTMLDivElement>(null)\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]}\n      title={tooltip}\n      ref={ref}\n      role=\"button\" tabIndex={0} aria-label={ariaLabelText}\n      onClick={ (event: SyntheticEvent) => actionHandler(event, action, ref) }\n      onKeyDown={(event: React.KeyboardEvent) => { if (event.key === \" \" || event.key === \"Enter\") {\n        actionHandler(event, action, undefined)\n      }}}\n      >\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{actionName}</span>\n    </div>\n  );\n};\n\ninterface markAsDeleteButtonInterface {\n  actionHandler: (event: KeyboardEvent | SyntheticEvent, action: ActionCreatorWithoutPayload<string>, ref: React.RefObject<HTMLDivElement> | undefined) => void,\n  action: ActionCreatorWithoutPayload<string>,\n  hotKeyName: KeySequence,\n}\n\n/**\n * Button that changes its function based on context\n */\nconst MarkAsDeletedButton : React.FC<markAsDeleteButtonInterface> = ({actionHandler, action, hotKeyName}) => {\n  const { t } = useTranslation();\n  const isCurrentSegmentAlive = useSelector(selectIsCurrentSegmentAlive)\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  return (\n    <div css={[basicButtonStyle, cuttingActionButtonStyle]}\n      title={t('cuttingActions.delete-restore-tooltip', { hotkeyName: hotKeyName })}\n      ref={ref}\n      role=\"button\" tabIndex={0}\n      aria-label={t('cuttingActions.delete-restore-tooltip-aria', { hotkeyName: hotKeyName })}\n      onClick={(event: SyntheticEvent) => actionHandler(event, action, ref)}\n      onKeyDown={(event: React.KeyboardEvent) => { if (event.key === \" \" || event.key === \"Enter\") {\n        actionHandler(event, action, undefined)\n      }}}\n      >\n      <FontAwesomeIcon icon={isCurrentSegmentAlive ? faTrash : faTrashRestore} size=\"1x\" />\n      <div>{isCurrentSegmentAlive ? t('cuttingActions.delete-button') : t(\"cuttingActions.restore-button\")}</div>\n    </div>\n  );\n}\n\nexport default CuttingActions;\n","import React, { useEffect } from \"react\";\n\nimport { css } from '@emotion/react'\nimport { errorBoxStyle } from '../cssStyles'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchMetadata, postMetadata, selectCatalogs,\n  Catalog, MetadataField, setFieldValue, selectGetError, selectGetStatus, selectPostError, selectPostStatus, setFieldReadonly\n} from '../redux/metadataSlice'\n\nimport { Form, Field, FieldInputProps } from 'react-final-form'\nimport Select from 'react-select'\nimport CreatableSelect from 'react-select/creatable';\n\nimport {\n  KeyboardDateTimePicker,\n  KeyboardTimePicker,\n  showErrorOnBlur,\n} from 'mui-rff';\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { DateTime as LuxonDateTime} from \"luxon\";\n\nimport { configureFieldsAttributes, settings } from '../config'\n\n\n/**\n * Creates a Metadata form\n *\n * Takes data from a redux slice and throws it into a react-final-form.\n * When submitting, the state in the redux slice gets updated\n *\n * If something doesn't work, main places of interest are the submit function\n * and the initialValues function\n */\nconst Metadata: React.FC<{}> = () => {\n\n  const { t, i18n } = useTranslation();\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const catalogs = useSelector(selectCatalogs);\n  const getStatus = useSelector(selectGetStatus);\n  const getError = useSelector(selectGetError);\n  const postStatus = useSelector(selectPostStatus);\n  const postError = useSelector(selectPostError);\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (getStatus === 'idle') {\n      dispatch(fetchMetadata())\n    }\n  }, [getStatus, dispatch])\n\n  // Overwrite readonly property of fields based on config settings\n  useEffect(() => {\n    if (getStatus === 'success') {\n      for(let catalogIndex = 0; catalogIndex < catalogs.length; catalogIndex++) {\n        if (settings.metadata.configureFields) {\n          let configureFields = settings.metadata.configureFields\n          let catalog = catalogs[catalogIndex]\n\n          if (catalog.title in configureFields) {\n            if (Object.keys(configureFields[catalog.title]).length > 0) {\n              let configureFieldsCatalog = configureFields[catalog.title]\n\n              for (let fieldIndex = 0; fieldIndex < catalog.fields.length; fieldIndex++) {\n                if (catalog.fields[fieldIndex].id in configureFieldsCatalog) {\n                  if (\"readonly\" in configureFieldsCatalog[catalog.fields[fieldIndex].id]) {\n                    dispatch(setFieldReadonly({catalogIndex: catalogIndex, fieldIndex: fieldIndex,\n                      value: configureFieldsCatalog[catalog.fields[fieldIndex].id].readonly\n                    }))\n                  }\n                }\n              }\n            } else {\n              return undefined\n            }\n          }\n        }\n      }\n    }\n  }, [getStatus, catalogs, dispatch])\n\n  /**\n   * CSS\n   */\n\n  const metadataStyle = css({\n    // maxWidth: '1500px',\n    // margin: '10px',\n    padding: '20px',\n  })\n\n  const fieldStyle = css({\n    display: 'flex',\n    flexFlow: 'row nowrap',\n    lineHeight: '2em',\n    margin: '10px',\n  })\n\n  const fieldLabelStyle = css({\n    alignSelf: 'center',\n    width: '110px',\n    fontSize: '1em',\n    lineHeight: '32px',\n  })\n\n  const fieldTypeStyle = (isReadOnly: boolean) => {\n    return (\n      css({\n        flex: '1',\n        fontSize: '1em',\n        marginLeft: '15px',\n        borderRadius: '5px',\n        backgroundColor: 'snow',\n        boxShadow: isReadOnly ? '0 0 0px rgba(0, 0, 0, 0.3)' : '0 0 1px rgba(0, 0, 0, 0.3)',\n        ...isReadOnly && {color: 'grey'}\n      })\n    );\n  }\n\n  const inputFieldTypeStyle = (isReadOnly: boolean) => {\n    return (\n      css({\n        padding: '10px 10px',\n        border: isReadOnly ? '0px solid #ccc' : '1px solid #ccc',\n      })\n    );\n  }\n\n  const selectFieldTypeStyle = {\n    control: (provided: any) => ({\n      ...provided,\n      background: 'snow'\n    }),\n    menu: (provided: any) => ({\n      ...provided,\n      background: 'snow',\n      // kill the gap\n      marginTop: 0\n    }),\n  }\n\n  const dateTimeTypeStyle = (isReadOnly: boolean) => {\n    return (\n      css ({\n        padding: '5px 10px',\n        border: isReadOnly ? '0px solid #ccc' : '1px solid #ccc',\n      })\n    );\n  }\n\n  const validateStyle = (isError: boolean) => {\n    return (\n      css({\n        lineHeight: '32px',\n        marginLeft: '10px',\n        ...(isError) && {color: '#800'},\n        fontWeight: 'bold',\n      })\n    )\n  }\n\n  // const buttonContainerStyle = css({\n  //   display: 'flex',\n  //   flexFlow: 'row nowrap',\n  //   justifyContent: 'space-around',\n  //   marginTop: '25px',\n  // })\n\n  // // TODO: Rework all div buttons so the ':enabled' pseudo-class does not screw them over\n  // const basicButtonStyleCOPY = css({\n  //   borderRadius: '10px',\n  //   cursor: \"pointer\",\n  //   // Animation\n  //   transitionDuration: \"0.3s\",\n  //   transitionProperty: \"transform\",\n  //   \"&:hover:enabled\": {\n  //     transform: 'scale(1.1)',\n  //   },\n  //   \"&:focus:enabled\": {\n  //     transform: 'scale(1.1)',\n  //   },\n  //   \"&:active:enabled\": {\n  //     transform: 'scale(0.9)',\n  //   },\n  //   // Flex position child elements\n  //   display: 'flex',\n  //   justifyContent: 'center',\n  //   alignItems: 'center',\n  //   gap: '10px',\n  //   textAlign: 'center' as const,\n  // });\n\n  // const submitButtonStyle = css({\n  //   background: 'snow',\n  //   border: '1px solid #ccc',\n\n  //   \"&[disabled]\": {\n  //     opacity: '0.6',\n  //     cursor: 'not-allowed',\n  //   },\n  // })\n\n  /**\n   * Form Callbacks - Other\n   */\n\n   /**\n    * Recursively recreates nested array structures for form initalValues\n    * @param library\n    * @param input\n    * @param output\n    */\n  const helperHandleArrays = (library: any[] | null, input: any, output: any[]) => {\n    // If the value is hid inside an array, we need to extract it\n    if (Array.isArray(input)) {\n      input.forEach((subArray: any) => {\n        output.push(helperHandleArrays(library, subArray, output))\n      })\n    }\n\n    // Find react-select equivalent for inital value\n    return library?.find(el => el.submitValue === input)\n  }\n\n  /**\n   * Returns a data structure to initialize the form fields with\n   * @param catalogs\n   */\n  const getInitialValues = (catalogs: Catalog[]) => {\n    const initValues : { [n: string]: any } = {};\n\n    catalogs.forEach((catalog: Catalog, catalogIndex: number) => {\n      initValues[\"catalog\" + catalogIndex] = {}\n      catalog.fields.forEach((field: MetadataField) =>{\n        initValues[\"catalog\" + catalogIndex][field.id] = field.value\n\n        // Handle initial values for select fields differently\n        // Since react-select creates different values\n        if (field.collection) {\n          const library = generateReactSelectLibrary(field)\n          let searchValue : any = field.value\n\n          if (Array.isArray(searchValue)) {\n            let result: any[] = [];\n            helperHandleArrays(library, field.value, result)\n            searchValue = result\n          } else {\n            searchValue = library?.find(el => el.submitValue === searchValue)\n          }\n\n          initValues[\"catalog\" + catalogIndex][field.id] = searchValue\n        }\n      })\n    })\n\n    return initValues\n  }\n\n  /**\n   * Form Callbacks - Validation\n   */\n\n  /**\n   * Validator for required fields\n   * @param value\n   */\n  const required = (value: any) => (value ? undefined : t(\"metadata.validation.required\"))\n\n  /**\n   * Validator for the duration field\n   * @param value\n   */\n  const duration = (value: any) => {\n    let re: RegExp = /^[0-9][0-9]:[0-9][0-9]:[0-9][0-9]$/\n    return re.test(value) ? undefined : t(\"metadata.validation.duration-format\")\n  }\n\n  /**\n   * Validator for the date time fields\n   * @param date\n   */\n  const dateTimeValidator = (date: any) => {\n    // Empty field is valid value in Opencast\n    if (!date) {\n      return undefined\n    }\n\n    let dt = undefined\n    if (Object.prototype.toString.call(date) === '[object Date]') {\n      dt = LuxonDateTime.fromJSDate(date);\n    }\n    if (typeof(date) === 'string') {\n      dt = LuxonDateTime.fromISO(date);\n    }\n\n    if (dt) {\n      return dt.isValid ? undefined : t(\"metadata.validation.datetime\")\n    }\n    return t(\"metadata.validation.datetime\")\n  }\n\n  // // Function that combines multiple validation functions. Needs to be made typescript conform\n  // const composeValidators = (...validators) => value =>\n  // validators.reduce((error, validator) => error || validator(value), undefined)\n\n  /**\n   * Returns the desired combination of validators for a given field\n   * TODO: Fix 'composeValidators' so this function can actually work as advertised\n   * @param field\n   */\n  const getValidators = (field: MetadataField) => {\n    if (field.required) {\n      return required\n    } else if (field.id === \"duration\") {\n      return duration\n    } else if (field.type === \"date\" || field.type === \"time\") {\n      return dateTimeValidator\n    } else {\n      return undefined\n    }\n  }\n\n  /**\n   * Form Callbacks - Submitting\n   */\n\n   /**\n    * Sends a single value to the corresponding field in redux.\n    * This kinda breaks the form workflow, since we do not use the submit callback\n    * of the form class anymore.\n    * @param value value for the field\n    * @param fieldId String of the form \"catalog{catalogIndex}.name\"\n    */\n  const submitSingleField = (value: any, fieldId: string) => {\n    const catalogIndexString = fieldId.substring(\n      fieldId.indexOf(\"g\") + 1,\n      fieldId.indexOf(\".\")\n    );\n    const fieldName = fieldId.substring(\n      fieldId.indexOf(\".\") + 1,\n      fieldId.length\n    );\n    const catalogIndex = parseInt(catalogIndexString)\n\n    // Find the corresponding field index in the redux catalog\n    for (let fieldIndex = 0; fieldIndex < catalogs[catalogIndex].fields.length; fieldIndex++) {\n      if (catalogs[catalogIndex].fields[fieldIndex].id === fieldName) {\n        // Update the field in the redux catalog\n        dispatch(setFieldValue({catalogIndex: catalogIndex, fieldIndex: fieldIndex,\n          value: parseValue(catalogs[catalogIndex].fields[fieldIndex], value)}))\n        break\n      }\n    }\n  }\n\n  /**\n   * Executes given blur callback while also sending the value of the current field to redux\n   * @param e\n   * @param input\n   */\n  const blurWithSubmit = (e: any, input: any) => {\n      input.onBlur(e);\n      submitSingleField(input.value, input.name)\n  }\n\n  /**\n   * Helper function for onSubmit\n   * Corrects formatting for certain form values\n   * @param field\n   * @param value\n   */\n  const parseValue = (field: MetadataField | null, value: any) => {\n    let returnValue : any = value\n\n    // Parse values out react-multi-select and put them in an array\n    if(Array.isArray(value)) {\n      returnValue = []\n      value.forEach((subValue : any) => {\n        returnValue.push(parseValue(null, subValue))  // Pass field as null to avoid each value into an array later on\n      })\n    }\n\n    // If the value is hidden an object due to react-select, extract it\n    if (typeof value === 'object' && value !== null && value.hasOwnProperty(\"submitValue\")) {\n      returnValue = value.submitValue\n    } else if (typeof value === 'object' && value !== null && value.__isNew__) {\n      returnValue = value.value\n    }\n\n    // For these fields, the value needs to be inside an array\n    if (field && !Array.isArray(value) &&(field.id === \"creator\" || field.id === \"contributor\")) {\n      returnValue = [returnValue]\n    }\n\n    // For these fields, the value needs to be inside an array\n    if (field && (field.type === \"date\" || field.type === \"time\") && Object.prototype.toString.call(returnValue) === '[object Date]') {\n      // If invalid date\n      if ((isNaN(returnValue.getTime()))) {\n        // Do nothing\n      } else {\n        returnValue = returnValue.toJSON()\n      }\n    } else if (field && (field.type === \"date\" || field.type === \"time\") && typeof returnValue === \"string\") {\n      if (returnValue !== \"\") { // Empty string is allowed\n        returnValue = new Date(returnValue).toJSON()\n      }\n    }\n\n    return returnValue\n  }\n\n  /**\n   * Callback for when the form is submitted\n   * Saves values in redux state and sends them to Opencast\n   * @param values\n   */\n  const onSubmit = (values: { [x: string]: { [x: string]: any; }; }) => {\n    // For each submitted value, get the catalog it belongs to\n    Object.keys(values).forEach((formCatalogName: string) => {\n      let catalogIndex = parseInt(formCatalogName.replace(\"catalog\", \"\"))\n\n      // For each field in the submitted values\n      Object.keys(values[formCatalogName]).forEach((formFieldName: any) => {\n        // Find the corresponding field index in the redux catalog\n        for (let fieldIndex = 0; fieldIndex < catalogs[catalogIndex].fields.length; fieldIndex++) {\n          if (catalogs[catalogIndex].fields[fieldIndex].id === formFieldName) {\n            // Update the field in the redux catalog\n            dispatch(setFieldValue({catalogIndex: catalogIndex, fieldIndex: fieldIndex,\n              value: parseValue(catalogs[catalogIndex].fields[fieldIndex], values[formCatalogName][formFieldName])}))\n            break\n          }\n        }\n      })\n\n      // Send updated values to Opencast\n      dispatch(postMetadata())\n    })\n  }\n\n  /**\n   * Form - Rendering\n   */\n\n  /**\n   * Transforms field values and labels into an array of objects\n   * that can be parsed by react-select\n   * @param field\n   */\n  const generateReactSelectLibrary = (field: MetadataField) => {\n    if (field.collection) {\n      // For whatever reason react-select uses 'value' as their key, which is not at all confusing\n      const library: [{value: any, label: any, submitValue: any}] = [{value: \"\", label: \"No value\", submitValue: \"\"}]\n      Object.entries(field.collection).forEach(([key, value]) => {\n        // // Parse License\n        // let [err, result] = safeJsonParse(key)\n        // if (!err) {\n        //   console.log(result)\n        // }\n\n        // Parse Label\n        let descLabel = null\n        if (i18n.exists(`metadata.${field.id}`)) {\n          descLabel = t(`metadata.${field.id}.${key.replaceAll(\".\", \"-\")}`)\n\n          if (field.id === \"license\") {\n            descLabel = t(`metadata.${field.id}.${JSON.parse(key).label.replaceAll(\".\", \"-\")}`)\n          }\n        }\n\n        // Change label for series\n        if (field.id === \"isPartOf\") {\n          descLabel = key\n        }\n\n        // Add to library\n        library.push({\n          value: key,\n          label: descLabel ? descLabel : value,\n          submitValue: value\n        })\n      })\n      return library\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Generates different form components based on the field\n   * @param field\n   * @param input\n   */\n  const generateComponent = (field: MetadataField, input: any) => {\n    input.id = input.name\n    if (field.collection) {\n      if (Array.isArray(field.value)) {\n        return (\n          <CreatableSelect {...input}\n            onBlur={e => {blurWithSubmit(e, input)}}\n            isMulti\n            isClearable\n            readOnly={field.readOnly}\n            options={generateReactSelectLibrary(field)}\n            styles={selectFieldTypeStyle}\n            css={fieldTypeStyle(field.readOnly)}>\n          </CreatableSelect>\n          );\n      } else {\n        return (\n          <Select {...input}\n            onBlur={e => {blurWithSubmit(e, input)}}\n            readOnly={field.readOnly}\n            options={generateReactSelectLibrary(field)}\n            styles={selectFieldTypeStyle}\n            css={fieldTypeStyle(field.readOnly)}>\n          </Select>\n          );\n      }\n\n    } else if (field.type === \"date\") {\n      return (\n        <div css={[fieldTypeStyle(field.readOnly), dateTimeTypeStyle(field.readOnly)]}>\n          <KeyboardDateTimePicker {...input}\n            onBlur={e => {blurWithSubmit(e, input)}}\n            name={field.id}\n            format=\"yyyy/MM/dd HH:mm\"\n            disabled={field.readOnly}\n            dateFunsUtils={DateFnsUtils}\n            showError={showErrorOnBlur}\n          />\n        </div>\n      );\n    } else if (field.type === \"time\") {\n      return (\n        <div css={[fieldTypeStyle(field.readOnly), dateTimeTypeStyle(field.readOnly)]}>\n          <KeyboardTimePicker {...input}\n            onBlur={e => {blurWithSubmit(e, input)}}\n            name={field.id}\n            format=\"HH:mm\"\n            disabled={field.readOnly}\n            dateFunsUtils={DateFnsUtils}\n            showError={showErrorOnBlur}\n          />\n        </div>\n      );\n    } else if (field.type === \"text_long\") {\n      return (\n        <textarea {...input}\n          onBlur={e => {blurWithSubmit(e, input)}}\n          readOnly={field.readOnly}\n          css={[fieldTypeStyle(field.readOnly), inputFieldTypeStyle(field.readOnly)]}\n        />\n      );\n    } else {\n      return(\n        <input {...input}\n          onBlur={e => {blurWithSubmit(e, input)}}\n          readOnly={field.readOnly}\n          css={[fieldTypeStyle(field.readOnly), inputFieldTypeStyle(field.readOnly)]}\n        />\n      );\n    }\n  }\n\n  /**\n   * Renders a field in a catalog\n   * @param field\n   * @param catalogIndex\n   * @param fieldIndex\n   */\n  const renderField = (field: MetadataField, catalogIndex: number, fieldIndex: number) => {\n\n    /**\n     * Wrapper function for component generation.\n     * Handles the special case of KeyboardDateTimePicker/KeyboardTimePicker, which\n     * can't handle empty string as a value (which is what Opencast uses to\n     * represent no date/time)\n     */\n    const generateComponentWithModifiedInput = (field: MetadataField, input: FieldInputProps<any, HTMLElement>) => {\n      if ((field.type === \"date\" || field.type === \"time\") && input.value === \"\") {\n        var {value, ...other} = input\n        return generateComponent(field, other)\n      } else {\n        return generateComponent(field, input)\n      }\n    }\n\n    return (\n        <Field key={fieldIndex}\n                name={\"catalog\" + catalogIndex + \".\" + field.id}\n                validate={getValidators(field)}\n                type={field.type === \"boolean\" ? \"checkbox\" : undefined}  // react-final-form complains if we don't specify checkboxes here\n                >\n                {({ input, meta }) => (\n                  <div css={fieldStyle}>\n                    <label css={fieldLabelStyle} htmlFor={input.name}>{\n                      i18n.exists(`metadata.labels.${field.id}`) ?\n                      t(`metadata.labels.${field.id}`) : field.id\n                    }</label>\n\n                    {generateComponentWithModifiedInput(field, input)}\n                    {meta.error && meta.touched && <span css={validateStyle(true)}>{meta.error}</span>}\n                    {meta.modified && meta.valid && !meta.active && <span css={validateStyle(false)}><FontAwesomeIcon icon={faCheck}/></span>}\n                  </div>\n                )}\n        </Field>\n    );\n  }\n\n  const renderCatalog = (\n    catalog: Catalog,\n    catalogIndex: number,\n    configureFields: { [key: string]: configureFieldsAttributes }\n  ) => {\n    return (\n      <div key={catalogIndex}>\n        <h2>\n          {i18n.exists(`metadata.${catalog.title.replaceAll(\".\", \"-\")}`) ?\n            t(`metadata.${catalog.title.replaceAll(\".\", \"-\")}`) : catalog.title\n          }\n        </h2>\n\n        {catalog.fields.map((field, i) => {\n          // Render fields based on given array (usually parsed from config settings)\n          if (field.id in configureFields && \"show\" in configureFields[field.id]) {\n            if (configureFields[field.id].show) {\n              return renderField(field, catalogIndex, i)\n            } else {\n              return undefined\n            }\n          }\n          return renderField(field, catalogIndex, i)\n        })}\n\n      </div>\n    );\n  }\n\n  /**\n   * Main render function. Renders all catalogs in a single form\n   */\n  const render = () => {\n    return (\n        <Form\n          onSubmit={onSubmit}\n          subscription={{ submitting: true, pristine: true }} // Hopefully causes less rerenders\n          initialValues={getInitialValues(catalogs)}\n          render={({ handleSubmit, form, submitting, pristine, values}) => (\n            <form onSubmit={event => {\n              handleSubmit(event)\n              // Ugly fix for form not getting updated after submit. TODO: Find a better fix\n              form.reset()\n            }} css={metadataStyle}>\n\n              <div css={errorBoxStyle(getStatus === \"failed\")} role=\"alert\">\n                <span>A problem occurred during communication with Opencast.</span><br />\n                {getError ? \"Details: \" + getError : \"No error details are available.\"}<br />\n              </div>\n\n              {catalogs.map((catalog, i) => {\n                if (settings.metadata.configureFields) {\n                  if (catalog.title in settings.metadata.configureFields) {\n                    // If there are no fields for a given catalog, do not render\n                    if (Object.keys(settings.metadata.configureFields[catalog.title]).length > 0) {\n                      return renderCatalog(catalog, i, settings.metadata.configureFields[catalog.title])\n                    } else {\n                      return undefined\n                    }\n                  }\n                }\n                // If there are no settings for a given catalog, just render it completely\n                return renderCatalog(catalog, i, {})\n              })}\n\n{/* \n                <div css={{display: \"block\", wordWrap: \"normal\", whiteSpace: \"pre\"}}>{t(\"metadata.submit-helpertext\", { buttonName: t(\"metadata.submit-button\") })}</div>\n\n\n              <div title=\"buttons\" css={buttonContainerStyle}>\n                <button css={[basicButtonStyleCOPY, nagivationButtonStyle, submitButtonStyle]}\n                  type=\"submit\"\n                  title={t(\"metadata.submit-button-tooltip\")}\n                  aria-label={t(\"metadata.submit-button-tooltip\")}\n                  disabled={submitting || pristine}>\n                    {t(\"metadata.submit-button\")}\n                </button>\n                <button css={[basicButtonStyleCOPY, nagivationButtonStyle, submitButtonStyle]}\n                  type=\"button\"\n                  title={t(\"metadata.reset-button-tooltip\")}\n                  aria-label={t(\"metadata.reset-button-tooltip\")}\n                  onClick={() => {form.reset()}}\n                  disabled={submitting || pristine}>\n                    {t(\"metadata.reset-button\")}\n                </button>\n              </div> */}\n\n              <div css={errorBoxStyle(postStatus === \"failed\")} role=\"alert\">\n                <span>A problem occurred during communication with Opencast. <br />\n                      Changes could not be saved to Opencast.</span><br />\n                {postError ? \"Details: \" + postError : \"No error details are available.\"}<br />\n              </div>\n\n              {/* For debugging the forms current values*/}\n              {/* <FormSpy subscription={{ values: true }}>\n                {({ values }) => (\n                  <pre>{JSON.stringify(values, null, 2)}</pre>\n                )}\n              </FormSpy> */}\n            </form>\n          )}\n        />\n    );\n  }\n\n  return (\n    render()\n  );\n}\n\nexport default Metadata;\n","import React from \"react\";\n\nimport { css } from '@emotion/react'\nimport { basicButtonStyle, flexGapReplacementStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSave, faFileExport, faTimesCircle, IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch } from 'react-redux';\nimport { setState, setPageNumber, finish } from '../redux/finishSlice'\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst FinishMenu : React.FC<{}> = () => {\n\n  const finishMenuStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    ...(flexGapReplacementStyle(30, false)),\n  })\n\n  return (\n    <div css={finishMenuStyle}>\n        <FinishMenuButton iconName={faSave} stateName=\"Save changes\"/>\n        <FinishMenuButton iconName={faFileExport} stateName=\"Start processing\"/>\n        <FinishMenuButton iconName={faTimesCircle} stateName=\"Discard changes\"/>\n    </div>\n  );\n}\n\n/**\n * Buttons for the finish menu\n */\nconst FinishMenuButton: React.FC<{iconName: IconDefinition, stateName: finish[\"value\"]}> = ({iconName, stateName}) => {\n\n  const { t } = useTranslation();\n\n  const dispatch = useDispatch();\n\n  const finish = () => {\n    dispatch(setState(stateName));\n    dispatch(setPageNumber(1))\n  }\n\n  const finishMenuButtonStyle = css({\n    width: '250px',\n    height: '220px',\n    flexDirection: 'column' as const,\n    fontSize: \"x-large\",\n    ...(flexGapReplacementStyle(30, false)),\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  });\n\n  var buttonString;\n  switch(stateName) {\n    case \"Save changes\":\n      buttonString = t(\"finishMenu.save-button\");\n      break;\n    case \"Start processing\":\n      buttonString = t(\"finishMenu.start-button\");\n      break;\n    case \"Discard changes\":\n      buttonString = t(\"finishMenu.discard-button\");\n      break;\n    default: \n      buttonString = \"Could not load String value\";\n      break;\n  }\n\n  return (\n    <div css={[basicButtonStyle, finishMenuButtonStyle]}\n    role=\"button\" tabIndex={0}\n      onClick={ finish }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        finish()\n      }}}>\n      <FontAwesomeIcon  icon={iconName} size=\"2x\"/>\n      <div>{buttonString}</div>\n    </div>\n  );\n};\n\n\n\n\n\nexport default FinishMenu;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { Segment, PostEditArgument, httpRequestState } from '../types'\nimport { settings } from '../config'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformation = createAsyncThunk('video/postVideoInformation', async (argument: PostEditArgument) => {\n  if (!settings.mediaPackageId) {\n    throw new Error(\"Missing mediaPackageId\")\n  }\n\n  const response = await client.post(`${settings.opencast.url}/editor/${settings.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostSlice = createSlice({\n  name: 'workflowPostState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformation.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformation.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformation.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\ninterface segmentAPI {\n  start: number,\n  end: number,\n  deleted: boolean,\n  selected: boolean,\n}\n\n// Convert a segment from how it is stored in redux into\n// a segment that can be send to Opencast\nexport const convertSegments = (segments: Segment[]) => {\n  let newSegments: segmentAPI[] = []\n\n  segments.forEach(segment => {\n    newSegments.push({\n      start: segment.start,\n      end: segment.end,\n      deleted: segment.deleted,\n      selected: false,\n    })\n  });\n\n  return newSegments\n}\n\nexport const selectStatus = (state: { workflowPostState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\nexport default workflowPostSlice.reducer\n","import React, { useEffect } from \"react\";\n\nimport { css } from '@emotion/react'\nimport { basicButtonStyle, backOrContinueStyle, ariaLive, errorBoxStyle,\n  nagivationButtonStyle, flexGapReplacementStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSpinner, faCheck, faExclamationCircle, faChevronLeft, faSave,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { selectSegments, selectTracks, setHasChanges as videoSetHasChanges } from '../redux/videoSlice'\nimport { postVideoInformation, selectStatus, selectError } from '../redux/workflowPostSlice'\n\nimport { PageButton } from './Finish'\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\nimport { postMetadata, selectPostError, selectPostStatus, setHasChanges as metadataSetHasChanges } from \"../redux/metadataSlice\";\n\n/**\n * Shown if the user wishes to save.\n * Informs the user about saving and displays a save button\n */\nconst Save : React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  const finishState = useSelector(selectFinishState)\n\n  const postWorkflowStatus = useSelector(selectStatus);\n  const postError = useSelector(selectError)\n  const postMetadataStatus = useSelector(selectPostStatus);\n  const postMetadataError = useSelector(selectPostError);\n\n  const saveStyle = css({\n    height: '100%',\n    display: finishState !== \"Save changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    ...(flexGapReplacementStyle(30, false)),\n  })\n\n  return (\n    <div css={saveStyle} title={t(\"save.saveArea-tooltip\")}>\n      <h1>{t(\"save.headline-text\")}</h1>\n      <span css={{maxWidth: '500px'}}>\n        {t(\"save.info-text\")}\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label={t(\"various.goBack-button\")} iconName={faChevronLeft}/>\n        <SaveButton />\n      </div>\n      <div css={errorBoxStyle(postWorkflowStatus === \"failed\")} role=\"alert\">\n        <span>{t(\"various.error-text\")}</span><br />\n        {postError ? t(\"various.error-details-text\", {errorMessage: postError}) : t(\"various.error-noDetails-text\")}<br />\n      </div>\n      <div css={errorBoxStyle(postMetadataStatus === \"failed\")} role=\"alert\">\n        <span>{t(\"various.error-text\")}</span><br />\n        {postMetadataError ? t(\"various.error-details-text\", {errorMessage: postMetadataError}) : t(\"various.error-noDetails-text\")}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n */\nexport const SaveButton: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n  const metadataStatus = useSelector(selectPostStatus);\n\n  // Update based on current fetching status\n  let icon = faSave\n  let spin = false\n  let tooltip = t(\"save.confirmButton-default-tooltip\")\n  if (workflowStatus === 'failed' || metadataStatus === 'failed'){\n    icon = faExclamationCircle\n    spin = false\n    tooltip = t(\"save.confirmButton-failed-tooltip\")\n  } else if (workflowStatus === 'success' && metadataStatus === 'success') {\n    icon = faCheck\n    spin = false\n    tooltip = t(\"save.confirmButton-success-tooltip\")\n  } else if (workflowStatus === 'loading' || metadataStatus === 'loading')  {\n    icon = faSpinner\n    spin = true\n    tooltip = t(\"save.confirmButton-attempting-tooltip\")\n  }\n\n  const ariaSaveUpdate = () => {\n    if(workflowStatus === 'success') {\n      return t(\"save.success-tooltip-aria\")\n    }\n  }\n\n  const save = () => {\n    dispatch(postMetadata())\n    dispatch(postVideoInformation({\n      segments: segments,\n      tracks: tracks,\n    }))\n  }\n\n  // Let users leave the page without warning after a successful save\n  useEffect(() => {\n    if (workflowStatus === 'success' && metadataStatus === 'success') {\n      dispatch(videoSetHasChanges(false))\n      dispatch(metadataSetHasChanges(false))\n    }\n  }, [dispatch, metadataStatus, workflowStatus])\n\n  return (\n    <div css={[basicButtonStyle, nagivationButtonStyle]} title={tooltip}\n      role=\"button\" tabIndex={0}\n      onClick={ save }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        save()\n      }}}>\n      <FontAwesomeIcon icon={icon} spin={spin} size=\"1x\"/>\n      <span>{t(\"save.confirm-button\")}</span>\n      <div css={ariaLive} aria-live=\"polite\" aria-atomic=\"true\">{ariaSaveUpdate()}</div>\n    </div>\n  );\n}\n\n\nexport default Save;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface end {\n  end: boolean,\n  value: 'success' | 'discarded',\n}\n\nconst initialState: end = {\n  end: false,\n  value: 'success',\n}\n\n/**\n * Slice for the main menu state\n */\nexport const endSlice = createSlice({\n  name: 'endState',\n  initialState,\n  reducers: {\n    setEnd: (state, action: PayloadAction<{hasEnded: end[\"end\"], value: end[\"value\"]}>) => {\n      state.end = action.payload.hasEnded;\n      state.value = action.payload.value;\n    },\n  }\n})\n\nexport const { setEnd, } = endSlice.actions\n\n// Export Selectors\nexport const selectIsEnd = (state: { endState: { end: end[\"end\"] }; }) => state.endState.end\nexport const selectEndState = (state: { endState: { value: end[\"value\"] }; }) => state.endState.value\n\nexport default endSlice.reducer\n","import React from \"react\";\n\nimport { css } from '@emotion/react'\nimport { basicButtonStyle, backOrContinueStyle, nagivationButtonStyle, flexGapReplacementStyle} from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronLeft, faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFinishState } from '../redux/finishSlice'\nimport { setEnd } from '../redux/endSlice'\n\nimport { PageButton } from './Finish'\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * Shown if the user wishes to abort.\n * Informs the user about aborting and displays abort button.\n */\nconst Discard : React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  const finishState = useSelector(selectFinishState)\n\n  const cancelStyle = css({\n    display: finishState !== \"Discard changes\" ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    ...(flexGapReplacementStyle(30, false)),\n  })\n\n  return (\n    <div css={cancelStyle}>\n      <h1>{t(\"discard.headline-text\")}</h1>\n      <span>\n        {t(\"discard.info-text\")}\n      </span>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={0} label={t(\"various.goBack-button\")} iconName={faChevronLeft} />\n        <DiscardButton />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sets the app into an aborted state\n */\nconst DiscardButton : React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const discard = () => {\n    dispatch(setEnd({hasEnded: true, value: 'discarded'}))\n  }\n\n  return (\n    <div css={[basicButtonStyle, nagivationButtonStyle]} title={t(\"discard.confirm-tooltip\")}\n      role=\"button\" tabIndex={0}\n      onClick={ discard }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        discard()\n      }}}>\n      <FontAwesomeIcon  icon={faTimesCircle} size=\"1x\"/>\n      <span>{t(\"discard.confirm-button\")}</span>\n    </div>\n  );\n}\n\nexport default Discard;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\nimport { PostAndProcessEditArgument, httpRequestState } from '../types'\n\nimport { convertSegments } from './workflowPostSlice'\nimport { settings } from '../config'\n\nconst initialState: httpRequestState = {\n  status: 'idle',\n  error: undefined,\n}\n\nexport const postVideoInformationWithWorkflow = createAsyncThunk('video/postVideoInformationWithWorkflow', async (argument: PostAndProcessEditArgument) => {\n  if (!settings.mediaPackageId) {\n    throw new Error(\"Missing mediaPackageId\")\n  }\n\n  const response = await client.post(`${settings.opencast.url}/editor/${settings.mediaPackageId}/edit.json`,\n    { segments: convertSegments(argument.segments), tracks: argument.tracks, workflows: argument.workflow }\n  )\n  return response\n})\n\n/**\n * Slice for managing a post request for saving current changes and starting a workflow\n * TODO: Create a wrapper for this and workflowPostAndProcessSlice\n */\nconst workflowPostAndProcessSlice = createSlice({\n  name: 'workflowPostAndProcessState',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      postVideoInformationWithWorkflow.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.fulfilled, (state, action) => {\n        state.status = 'success'\n    })\n    builder.addCase(\n      postVideoInformationWithWorkflow.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nexport const selectStatus = (state: { workflowPostAndProcessState: { status: httpRequestState[\"status\"] } }) =>\n  state.workflowPostAndProcessState.status\nexport const selectError = (state: { workflowPostAndProcessState: { error: httpRequestState[\"error\"] } }) =>\n  state.workflowPostAndProcessState.error\n\n\nexport default workflowPostAndProcessSlice.reducer\n","import React, { useEffect } from \"react\";\n\nimport { css } from '@emotion/react'\nimport { basicButtonStyle, backOrContinueStyle, errorBoxStyle, flexGapReplacementStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner, faCheck, faExclamationCircle, faChevronLeft, faFileExport } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, selectSegments, selectTracks, setHasChanges as videoSetHasChanges } from '../redux/videoSlice'\nimport { postVideoInformationWithWorkflow, selectStatus, selectError } from '../redux/workflowPostAndProcessSlice'\n\nimport { PageButton } from './Finish'\nimport { setEnd } from \"../redux/endSlice\";\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\nimport { postMetadata, selectPostError, selectPostStatus, setHasChanges as metadataSetHasChanges } from \"../redux/metadataSlice\";\n\n/**\n * Will eventually display settings based on the selected workflow index\n */\nconst WorkflowConfiguration : React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n  const postMetadataStatus = useSelector(selectPostStatus);\n  const postMetadataError = useSelector(selectPostError);\n\n  const workflowConfigurationStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    ...(flexGapReplacementStyle(30, false)),\n  })\n\n  return (\n    <div css={workflowConfigurationStyle} title={t(\"workflowConfig.area-tooltip\")}>\n      <h2>{t(\"workflowConfig.headline-text\")}</h2>\n      <FontAwesomeIcon icon={faTools} size=\"10x\" />\n      Placeholder\n      <div>{t(\"workflowConfig.satisfied-text\")}</div>\n      <div css={backOrContinueStyle}>\n        <PageButton pageNumber={1} label={t(\"various.goBack-button\")} iconName={faChevronLeft}/>\n        <SaveAndProcessButton text={t(\"workflowConfig.confirm-button\")}/>\n      </div>\n      <div css={errorBoxStyle(postAndProcessWorkflowStatus === \"failed\")} role=\"alert\">\n        <span>{t(\"various.error-text\")}</span><br />\n        {postAndProcessError ? t(\"various.error-details-text\", {errorMessage: postAndProcessError}) : t(\"various.error-noDetails-text\")}<br/>\n      </div>\n      <div css={errorBoxStyle(postMetadataStatus === \"failed\")} role=\"alert\">\n        <span>{t(\"various.error-text\")}</span><br />\n        {postMetadataError ? t(\"various.error-details-text\", {errorMessage: postMetadataError}) : t(\"various.error-noDetails-text\")}<br />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Button that sends a post request to save current changes\n * and starts the selected workflow\n */\nexport const SaveAndProcessButton: React.FC<{text: string}> = ({text}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const workflows = useSelector(selectWorkflows)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n  const segments = useSelector(selectSegments)\n  const tracks = useSelector(selectTracks)\n  const workflowStatus = useSelector(selectStatus);\n  const metadataStatus = useSelector(selectPostStatus);\n\n  // Let users leave the page without warning after a successful save\n  useEffect(() => {\n    if (workflowStatus === 'success' && metadataStatus === 'success') {\n      dispatch(videoSetHasChanges(false))\n      dispatch(metadataSetHasChanges(false))\n    }\n  }, [dispatch, metadataStatus, workflowStatus])\n\n  const saveAndProcess = () => {\n    dispatch(postMetadata())\n    dispatch(postVideoInformationWithWorkflow({\n      segments: segments,\n      tracks: tracks,\n      workflow: [{id: workflows[selectedWorkflowIndex].id}],\n    }))\n  }\n\n  // Update based on current fetching status\n  let icon = faFileExport\n  let spin = false\n  if (workflowStatus === 'failed' || metadataStatus === 'failed') {\n    icon = faExclamationCircle\n    spin = false\n  } else if (workflowStatus === 'success' && metadataStatus === 'success') {\n    icon = faCheck\n    spin = false\n    dispatch(setEnd({hasEnded: true, value: 'success'}))\n  } else if (workflowStatus === 'loading' || metadataStatus === 'loading') {\n    icon = faSpinner\n    spin = true\n\n  }\n\n  const saveButtonStyle = css({\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n  })\n\n  return (\n    <div css={[basicButtonStyle, saveButtonStyle]} title={\"Start processing button\"}\n      role=\"button\" tabIndex={0}\n      onClick={ saveAndProcess }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        saveAndProcess()\n      }}}>\n      <FontAwesomeIcon  icon={icon} spin={spin} size=\"1x\"/>\n      <span>{text}</span>\n    </div>\n  );\n}\n\nexport default WorkflowConfiguration;\n","import React from \"react\";\n\nimport { css } from '@emotion/react'\nimport { basicButtonStyle, backOrContinueStyle, errorBoxStyle, flexGapReplacementStyle } from '../cssStyles'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWorkflows, selectSelectedWorkflowIndex, setSelectedWorkflowIndex } from '../redux/videoSlice'\nimport { selectFinishState, selectPageNumber } from '../redux/finishSlice'\n\nimport { PageButton } from './Finish'\nimport { faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { SaveAndProcessButton } from \"./WorkflowConfiguration\";\nimport { selectStatus, selectError } from \"../redux/workflowPostAndProcessSlice\";\nimport { selectStatus as saveSelectStatus, selectError as saveSelectError } from \"../redux/workflowPostSlice\";\nimport { httpRequestState, Workflow } from \"../types\";\nimport { SaveButton } from \"./Save\";\nimport { EmotionJSX } from \"@emotion/react/types/jsx-namespace\";\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\nimport { Trans } from \"react-i18next\";\n\n/**\n * Allows the user to select a workflow\n */\nconst WorkflowSelection : React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  // Initialite redux states\n  const workflows = useSelector(selectWorkflows)\n  const finishState = useSelector(selectFinishState)\n  const pageNumber = useSelector(selectPageNumber)\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const postAndProcessWorkflowStatus = useSelector(selectStatus);\n  const postAndProcessError = useSelector(selectError)\n  const saveStatus = useSelector(saveSelectStatus);\n  const saveError = useSelector(saveSelectError)\n\n  // Create workflow selection\n  const workflowButtons = () => {\n    return (\n      workflows.map( (workflow: Workflow, index: number) => (\n        <WorkflowButton key={index} stateName={workflow.name} workflowIndex={index}/>\n      ))\n    );\n  }\n\n  // Gets the description from the currently selected workflow\n  const workflowDescription = () => {\n    if (workflows.length > selectedWorkflowIndex && workflows[selectedWorkflowIndex].description) {\n      return (\n        workflows[selectedWorkflowIndex].description\n      );\n    } else {\n      return (' ');\n    }\n  }\n\n  const workflowSelectionStyle = css({\n    padding: '20px',\n    display: (finishState === \"Start processing\" && pageNumber === 1) ? 'flex' : 'none',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    ...(flexGapReplacementStyle(50, false)),\n  })\n\n  const workflowSelectionSelectionStyle = css({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'left',\n    ...(flexGapReplacementStyle(20, false)),\n    flexWrap: 'wrap',\n    maxHeight: '50vh',\n  })\n\n  // Layout template\n  const render = (topTitle: string, topText: {} | null | undefined, hasWorkflowButtons: boolean,\n    bottomText: {} | null | undefined, nextButton: EmotionJSX.Element, errorStatus: httpRequestState[\"status\"],\n    errorMessage: httpRequestState[\"error\"]) => {\n    return (\n      <div css={workflowSelectionStyle}>\n        <h2>{topTitle}</h2>\n        {topText}\n        { hasWorkflowButtons &&\n          <div css={workflowSelectionSelectionStyle} title=\"Workflow Selection Area\">\n            {workflowButtons()}\n          </div>\n        }\n        {bottomText}\n        <div css={backOrContinueStyle}>\n          <PageButton pageNumber={0} label={t(\"workflowSelection.back-button\")} iconName={faChevronLeft}/>\n          {/* <PageButton pageNumber={2} label=\"Continue\" iconName={faChevronRight}/> */}\n          {nextButton}\n        </div>\n        <div css={errorBoxStyle(errorStatus === \"failed\")} role=\"alert\">\n          <span>{t(\"various.error-text\")}</span><br />\n          {errorMessage ? t(\"various.error-details-text\", {errorMessage: postAndProcessError}) : t(\"various.error-noDetails-text\")}<br/>\n        </div>\n      </div>\n    );\n  }\n\n  // Fills the layout template with values based on how many workflows are available\n  const renderSelection = () => {\n    if (workflows.length <= 0) {\n      return(\n        render(\n          t(\"workflowSelection.saveAndProcess-text\"),\n          <Trans i18nKey=\"workflowSelection.noWorkflow-text\">\n            A problem occurred, there are no workflows to process your changes with.<br />\n            Please save your changes and contact an Opencast Administrator.\n          </Trans>,\n          false,\n          \"\",\n          <SaveButton />,\n          saveStatus,\n          saveError\n        )\n      );\n    } else if (workflows.length === 1) {\n      return (\n        render(\n          t(\"workflowSelection.saveAndProcess-text\"),\n          <Trans i18nKey=\"workflowSelection.oneWorkflow-text\">\n            The video will be cut and processed with the workflow \"{{workflow: workflows[0].name}}\".<br/>\n            This will take some time.\n          </Trans>,\n          false,\n          \"\",\n          <SaveAndProcessButton text={t(\"workflowSelection.startProcessing-button\")}/>,\n          postAndProcessWorkflowStatus,\n          postAndProcessError\n        )\n      );\n    } else {\n      return (\n        render(\n          t(\"workflowSelection.selectWF-text\"),\n          <div>\n            {t(\"workflowSelection.manyWorkflows-text\")}\n          </div>,\n          true,\n          <div><i>{workflowDescription()}</i></div>,\n          <SaveAndProcessButton text= {t(\"workflowSelection.startProcessing-button\")}/>,\n          postAndProcessWorkflowStatus,\n          postAndProcessError\n        )\n      )\n    }\n  }\n\n  return (\n    renderSelection()\n  );\n}\n\n/**\n * Clicking this button sets the associated workflow as selected\n * @param param0\n */\nconst WorkflowButton: React.FC<{stateName: string, workflowIndex: number}> = ({stateName, workflowIndex}) => {\n\n  const { t } = useTranslation();\n\n  const dispatch = useDispatch();\n  const selectedWorkflowIndex = useSelector(selectSelectedWorkflowIndex)\n\n  const selectWorkflowIndex = () => {\n    dispatch(setSelectedWorkflowIndex(workflowIndex))\n  }\n\n  const workflowButtonStyle = css({\n    backgroundColor: workflowIndex !== selectedWorkflowIndex ? 'snow' : '#DDD',\n    padding: '16px',\n  });\n\n  return (\n    <div css={[basicButtonStyle,workflowButtonStyle]} title={t(\"workflowSelection.selectWF-button\")}\n      role=\"button\" tabIndex={0}\n      aria-label={t(\"workflowSelection.selectWF-button\", {stateName})}\n      onClick={ selectWorkflowIndex }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        selectWorkflowIndex()\n      }}}>\n      <span>{stateName}</span>\n    </div>\n  );\n}\n\nexport default WorkflowSelection;\n","import React from \"react\";\n\nimport FinishMenu from \"./FinishMenu\";\nimport Save from \"./Save\"\nimport Discard from \"./Discard\"\nimport WorkflowSelection from \"./WorkflowSelection\";\nimport WorkflowConfiguration from \"./WorkflowConfiguration\";\n\nimport { css } from '@emotion/react'\nimport { basicButtonStyle } from '../cssStyles'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconDefinition\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPageNumber, setPageNumber } from '../redux/finishSlice'\n\n/**\n * Displays a menu for selecting what should be done with the current changes\n */\nconst Finish : React.FC<{}> = () => {\n\n  const pageNumber = useSelector(selectPageNumber)\n\n  const pageZeroStyle = css({\n    display: pageNumber !== 0 ? 'none' :'block',\n  })\n\n  const pageOneStyle = css({\n    display: pageNumber !== 1 ? 'none' :'block',\n  })\n\n  const pageTwoStyle = css({\n    display: pageNumber !== 2 ? 'none' :'block',\n  })\n\n  return (\n    <div>\n      <div css={pageZeroStyle} >\n        <FinishMenu />\n      </div>\n      <div css={pageOneStyle} >\n        <Save />\n        <WorkflowSelection />\n        <Discard />\n      </div>\n      <div css={pageTwoStyle} >\n        <WorkflowConfiguration />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Takes you to a different page\n */\nexport const PageButton : React.FC<{pageNumber: number, label: string, iconName: IconDefinition}> = ({pageNumber, label, iconName}) => {\n\n  // Initialize redux variables\n  const dispatch = useDispatch()\n\n  const onPageChange = () => {\n    dispatch(setPageNumber(pageNumber))\n  }\n\n  const pageButtonStyle = css({\n    width: '200px',\n    padding: '16px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    justifyContent: 'space-around'\n  })\n\n  return (\n    <div css={[basicButtonStyle, pageButtonStyle]}\n      role=\"button\" tabIndex={0}\n      onClick={ onPageChange }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        onPageChange()\n      }}}>\n      <FontAwesomeIcon icon={iconName} size=\"1x\" />\n      <span>{label}</span>\n    </div>\n  );\n}\n\n\nexport default Finish;\n","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\nimport Metadata from './Metadata';\nimport Finish from \"./Finish\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/react'\n\nimport { useSelector } from 'react-redux'\nimport { selectMainMenuState } from '../redux/mainMenuSlice'\n\nimport { MainMenuStateNames } from '../types'\nimport { flexGapReplacementStyle } from \"../cssStyles\";\n\nimport { useBeforeunload } from 'react-beforeunload';\nimport { hasChanges as videoHasChanges } from \"../redux/videoSlice\";\nimport { hasChanges as metadataHasChanges} from \"../redux/metadataSlice\";\n\n/**\n * A container for the main functionality\n * Shows different components depending on the state off the app\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n  const videoChanged = useSelector(videoHasChanges)\n  const metadataChanged = useSelector(metadataHasChanges)\n\n  // Display warning when leaving the page if there are unsaved changes\n  useBeforeunload((event: { preventDefault: () => void; }) => {\n    if (videoChanged || metadataChanged) {\n      event.preventDefault();\n    }\n  });\n\n  // Return display 'flex' if state is currently active\n  // also keep track if any state was activated\n  var stateActive = false;\n  let displayState = (state: MainMenuStateNames): object => {\n    if (mainMenuState === state) {\n      stateActive = true;\n      return { display: \"flex\" };\n    }\n    return { display: 'none' };\n  }\n\n  const cuttingStyle = css({\n    ...displayState(MainMenuStateNames.cutting),\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    ...(flexGapReplacementStyle(20, false)),\n    paddingRight: '20px',\n    paddingLeft: '20px',\n  })\n\n  const metadataStyle = css({\n    ...displayState(MainMenuStateNames.metadata),\n    // flexDirection: 'column' as const,\n    // justifyContent: 'space-around',\n    ...(flexGapReplacementStyle(20, false)),\n    paddingRight: '20px',\n    paddingLeft: '20px',\n  })\n\n  const finishStyle = css({\n    ...displayState(MainMenuStateNames.finish),\n    flexDirection: 'column' as const,\n    justifyContent: 'space-around',\n    ...(flexGapReplacementStyle(20, false)),\n    paddingRight: '20px',\n    height: '100%',\n  })\n\n  const defaultStyle = css({\n    display: stateActive ? 'none' : 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    padding: '20px',\n    ...(flexGapReplacementStyle(20, false)),\n  })\n\n  return (\n     <main css={{width: '100%'}} role=\"main\">\n      <div css={cuttingStyle}>\n          <Video />\n          <CuttingActions />\n          <Timeline />\n      </div>\n      <div css={metadataStyle}>\n          <Metadata />\n      </div>\n      <div css={finishStyle}>\n        <Finish />\n      </div>\n      <div css={defaultStyle}>\n        <FontAwesomeIcon icon={faTools} size=\"10x\" />\n        Placeholder\n      </div>\n     </main>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\n\nimport { css } from '@emotion/react'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux';\nimport { selectDuration } from '../redux/videoSlice'\nimport { selectEndState } from '../redux/endSlice'\nimport { basicButtonStyle, flexGapReplacementStyle, nagivationButtonStyle } from \"../cssStyles\";\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * This page is to be displayed when the user is \"done\" with the editor\n * and should not be able to perfom any actions anymore\n */\nconst TheEnd : React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  // Init redux variables\n  const endState = useSelector(selectEndState)\n  const duration = useSelector(selectDuration)\n\n  const icon = () => {\n    if (endState === 'discarded') {\n      return faTimesCircle\n    } else {\n      return faCheckCircle\n    }\n  }\n\n  const text = () => {\n    if (endState === 'discarded') {\n      return t(\"theEnd.discarded-text\")\n    } else if (endState === 'success') {\n      return t(\"theEnd.info-text\", {duration: `${new Date((duration * 2)).toISOString().substr(11, 8)}`}\n      )\n    }\n  }\n\n  const theEndStyle = css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    ...(flexGapReplacementStyle(20, false)),\n  })\n\n  return (\n    <div css={theEndStyle} title=\"The End\">\n      <FontAwesomeIcon icon={icon()} size=\"10x\" />\n      <div>{text()}</div>\n      {(endState === 'discarded') && <StartOverButton />}\n    </div>\n  );\n}\n\n\nconst StartOverButton: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  const reloadPage = () => {\n    window.location.reload(true);\n  };\n\n  return (\n    <div css={[basicButtonStyle, nagivationButtonStyle]} title={t(\"theEnd.startOver-tooltip\")}\n      role=\"button\" tabIndex={0}\n      onClick={ reloadPage }\n      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => { if (event.key === \" \" || event.key === \"Enter\") {\n        reloadPage()\n      }}}>\n      {/* <FontAwesomeIcon icon={icon} spin={spin} size=\"1x\"/> */}\n      <span>{t(\"theEnd.startOver-button\")}</span>\n    </div>\n  );\n}\n\nexport default TheEnd\n","import React from \"react\";\n\nimport { css } from '@emotion/react'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFrown } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux';\nimport { selectErrorDetails, selectErrorMessage } from '../redux/errorSlice'\nimport { flexGapReplacementStyle } from \"../cssStyles\";\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * This page is to be displayed when the application has run into a critical error\n * from which it cannot recover.\n */\n const Error : React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  // Init redux variables\n  const errorMessage = useSelector(selectErrorMessage)\n  const errorDetails = useSelector(selectErrorDetails)\n\n  const detailsStyle = css({\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  })\n\n  const theEndStyle = css({\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    ...(flexGapReplacementStyle(10, false)),\n  })\n\n  return (\n    <div css={theEndStyle} >\n      <div>{t(\"error.generic-message\")}</div>\n      <FontAwesomeIcon icon={faFrown} size=\"10x\" />\n      <span>{errorMessage}</span><br />\n      <div css={detailsStyle}>\n        <span>{t(\"error.details\")}</span><br />\n        <span>{errorDetails ? errorDetails : t(\"various.error-noDetails-text\") }</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Error\n","import React from \"react\";\n\nimport { css } from '@emotion/react'\n\nimport './../i18n/config';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * This page is to be displayed when the application has run into a critical error\n * from which it cannot recover.\n */\n const Landing : React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n\n  const landingStyle = css({\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n\n    a: {\n      color: '#007bff',\n      textDecoration: 'none',\n    },\n    li: {\n      margin: '5px',\n    },\n    code: {\n      userSelect: 'all',\n      color: '#e83e8c',\n    }\n  })\n\n  return (\n    <div css={landingStyle} >\n      <h1>{t(\"landing.main-heading\")}</h1>\n      <div>\n        <li>\n        {t(\"landing.contact-admin\")}\n        </li>\n        <li>\n          {t(\"landing.start-editing-1\")}\n          <code> ?=mediaPackageId=[media-package-id]</code>\n          {t(\"landing.start-editing-2\")}\n        </li>\n        <li>\n          {t(\"landing.link-to-documentation\")}\n          <a href=\"https://docs.opencast.org/stable/admin/\">docs.opencast.org</a>\n        </li>\n      </div>\n    </div>\n  );\n}\n\nexport default Landing\n","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\nimport TheEnd from './TheEnd';\nimport Error from './Error';\nimport Landing from \"./Landing\";\n\nimport { useSelector } from 'react-redux';\nimport { selectIsEnd } from '../redux/endSlice'\nimport { selectIsError } from \"../redux/errorSlice\";\nimport { settings } from '../config';\n\n\nconst Body: React.FC<{}> = () => {\n\n  const isEnd = useSelector(selectIsEnd)\n  const isError = useSelector(selectIsError)\n\n  // If we're in a special state, display a special page\n  // Otherwise display the normal page\n  const main = () => {\n    if (!settings.mediaPackageId) {\n      return (\n        <Landing />\n      )\n    } else if (isEnd) {\n      return (\n        <TheEnd />\n      );\n    } else if (isError) {\n      return (\n        <Error />\n      );\n    } else {\n      return (\n        <div css={bodyStyle}>\n          <MainMenu />\n          <MainContent />\n        </div>\n      );\n    }\n  }\n\n  const bodyStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n    height: '100%',\n  };\n\n  return (\n    <React.Fragment>\n      {main()}\n    </React.Fragment>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport Body from './main/Body';\nimport { GlobalStyle } from './cssStyles'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport finishStateReducer from './finishSlice'\nimport videoReducer from './videoSlice'\nimport workflowPostReducer from './workflowPostSlice'\nimport workflowPostAndProcessReducer from './workflowPostAndProcessSlice'\nimport endReducer from './endSlice'\nimport metadataReducer from './metadataSlice'\nimport errorReducer from './errorSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    finishState: finishStateReducer,\n    videoState: videoReducer,\n    workflowPostState: workflowPostReducer,\n    workflowPostAndProcessState: workflowPostAndProcessReducer,\n    endState: endReducer,\n    metadataState: metadataReducer,\n    errorState: errorReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nimport { init } from './config'\nimport { sleep } from './util/utilityFunctions'\n\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\n\n// Load config here\n// Load the rest of the application and try to fetch the settings file from the\n// server.\nconst initialize = Promise.race([\n  init(),\n  sleep(300),\n]);\n\nconst render = (body: JSX.Element) => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\ninitialize.then(\n\n  () => {\n    ReactDOM.render(\n      <React.StrictMode>\n          <Provider store={store}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <App />\n            </MuiPickersUtilsProvider>\n          </Provider>\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>\n    {`Fatal error while loading app: ${e.message}`}\n    <br />\n    This might be caused by a incorrect configuration by the system administrator.\n  </p>),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}